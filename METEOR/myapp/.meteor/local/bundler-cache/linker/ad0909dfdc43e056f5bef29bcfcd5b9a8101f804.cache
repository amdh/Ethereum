[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar PersistentMinimongo2;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/frozeman_persistent-minimongo2/localforage.js                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/*!                                                                                                                 // 1\n    localForage -- Offline Storage, Improved                                                                        // 2\n    Version 1.2.6                                                                                                   // 3\n    https://mozilla.github.io/localForage                                                                           // 4\n    (c) 2013-2015 Mozilla, Apache License 2.0                                                                       // 5\n*/                                                                                                                  // 6\n(function() {                                                                                                       // 7\nvar define, requireModule, require, requirejs;                                                                      // 8\n                                                                                                                    // 9\n(function() {                                                                                                       // 10\n  var registry = {}, seen = {};                                                                                     // 11\n                                                                                                                    // 12\n  define = function(name, deps, callback) {                                                                         // 13\n    registry[name] = { deps: deps, callback: callback };                                                            // 14\n  };                                                                                                                // 15\n                                                                                                                    // 16\n  requirejs = require = requireModule = function(name) {                                                            // 17\n  requirejs._eak_seen = registry;                                                                                   // 18\n                                                                                                                    // 19\n    if (seen[name]) { return seen[name]; }                                                                          // 20\n    seen[name] = {};                                                                                                // 21\n                                                                                                                    // 22\n    if (!registry[name]) {                                                                                          // 23\n      throw new Error(\"Could not find module \" + name);                                                             // 24\n    }                                                                                                               // 25\n                                                                                                                    // 26\n    var mod = registry[name],                                                                                       // 27\n        deps = mod.deps,                                                                                            // 28\n        callback = mod.callback,                                                                                    // 29\n        reified = [],                                                                                               // 30\n        exports;                                                                                                    // 31\n                                                                                                                    // 32\n    for (var i=0, l=deps.length; i<l; i++) {                                                                        // 33\n      if (deps[i] === 'exports') {                                                                                  // 34\n        reified.push(exports = {});                                                                                 // 35\n      } else {                                                                                                      // 36\n        reified.push(requireModule(resolve(deps[i])));                                                              // 37\n      }                                                                                                             // 38\n    }                                                                                                               // 39\n                                                                                                                    // 40\n    var value = callback.apply(this, reified);                                                                      // 41\n    return seen[name] = exports || value;                                                                           // 42\n                                                                                                                    // 43\n    function resolve(child) {                                                                                       // 44\n      if (child.charAt(0) !== '.') { return child; }                                                                // 45\n      var parts = child.split(\"/\");                                                                                 // 46\n      var parentBase = name.split(\"/\").slice(0, -1);                                                                // 47\n                                                                                                                    // 48\n      for (var i=0, l=parts.length; i<l; i++) {                                                                     // 49\n        var part = parts[i];                                                                                        // 50\n                                                                                                                    // 51\n        if (part === '..') { parentBase.pop(); }                                                                    // 52\n        else if (part === '.') { continue; }                                                                        // 53\n        else { parentBase.push(part); }                                                                             // 54\n      }                                                                                                             // 55\n                                                                                                                    // 56\n      return parentBase.join(\"/\");                                                                                  // 57\n    }                                                                                                               // 58\n  };                                                                                                                // 59\n})();                                                                                                               // 60\n                                                                                                                    // 61\ndefine(\"promise/all\",                                                                                               // 62\n  [\"./utils\",\"exports\"],                                                                                            // 63\n  function(__dependency1__, __exports__) {                                                                          // 64\n    \"use strict\";                                                                                                   // 65\n    /* global toString */                                                                                           // 66\n                                                                                                                    // 67\n    var isArray = __dependency1__.isArray;                                                                          // 68\n    var isFunction = __dependency1__.isFunction;                                                                    // 69\n                                                                                                                    // 70\n    /**                                                                                                             // 71\n      Returns a promise that is fulfilled when all the given promises have been                                     // 72\n      fulfilled, or rejected if any of them become rejected. The return promise                                     // 73\n      is fulfilled with an array that gives all the values in the order they were                                   // 74\n      passed in the `promises` array argument.                                                                      // 75\n                                                                                                                    // 76\n      Example:                                                                                                      // 77\n                                                                                                                    // 78\n      ```javascript                                                                                                 // 79\n      var promise1 = RSVP.resolve(1);                                                                               // 80\n      var promise2 = RSVP.resolve(2);                                                                               // 81\n      var promise3 = RSVP.resolve(3);                                                                               // 82\n      var promises = [ promise1, promise2, promise3 ];                                                              // 83\n                                                                                                                    // 84\n      RSVP.all(promises).then(function(array){                                                                      // 85\n        // The array here would be [ 1, 2, 3 ];                                                                     // 86\n      });                                                                                                           // 87\n      ```                                                                                                           // 88\n                                                                                                                    // 89\n      If any of the `promises` given to `RSVP.all` are rejected, the first promise                                  // 90\n      that is rejected will be given as an argument to the returned promises's                                      // 91\n      rejection handler. For example:                                                                               // 92\n                                                                                                                    // 93\n      Example:                                                                                                      // 94\n                                                                                                                    // 95\n      ```javascript                                                                                                 // 96\n      var promise1 = RSVP.resolve(1);                                                                               // 97\n      var promise2 = RSVP.reject(new Error(\"2\"));                                                                   // 98\n      var promise3 = RSVP.reject(new Error(\"3\"));                                                                   // 99\n      var promises = [ promise1, promise2, promise3 ];                                                              // 100\n                                                                                                                    // 101\n      RSVP.all(promises).then(function(array){                                                                      // 102\n        // Code here never runs because there are rejected promises!                                                // 103\n      }, function(error) {                                                                                          // 104\n        // error.message === \"2\"                                                                                    // 105\n      });                                                                                                           // 106\n      ```                                                                                                           // 107\n                                                                                                                    // 108\n      @method all                                                                                                   // 109\n      @for RSVP                                                                                                     // 110\n      @param {Array} promises                                                                                       // 111\n      @param {String} label                                                                                         // 112\n      @return {Promise} promise that is fulfilled when all `promises` have been                                     // 113\n      fulfilled, or rejected if any of them become rejected.                                                        // 114\n    */                                                                                                              // 115\n    function all(promises) {                                                                                        // 116\n      /*jshint validthis:true */                                                                                    // 117\n      var Promise = this;                                                                                           // 118\n                                                                                                                    // 119\n      if (!isArray(promises)) {                                                                                     // 120\n        throw new TypeError('You must pass an array to all.');                                                      // 121\n      }                                                                                                             // 122\n                                                                                                                    // 123\n      return new Promise(function(resolve, reject) {                                                                // 124\n        var results = [], remaining = promises.length,                                                              // 125\n        promise;                                                                                                    // 126\n                                                                                                                    // 127\n        if (remaining === 0) {                                                                                      // 128\n          resolve([]);                                                                                              // 129\n        }                                                                                                           // 130\n                                                                                                                    // 131\n        function resolver(index) {                                                                                  // 132\n          return function(value) {                                                                                  // 133\n            resolveAll(index, value);                                                                               // 134\n          };                                                                                                        // 135\n        }                                                                                                           // 136\n                                                                                                                    // 137\n        function resolveAll(index, value) {                                                                         // 138\n          results[index] = value;                                                                                   // 139\n          if (--remaining === 0) {                                                                                  // 140\n            resolve(results);                                                                                       // 141\n          }                                                                                                         // 142\n        }                                                                                                           // 143\n                                                                                                                    // 144\n        for (var i = 0; i < promises.length; i++) {                                                                 // 145\n          promise = promises[i];                                                                                    // 146\n                                                                                                                    // 147\n          if (promise && isFunction(promise.then)) {                                                                // 148\n            promise.then(resolver(i), reject);                                                                      // 149\n          } else {                                                                                                  // 150\n            resolveAll(i, promise);                                                                                 // 151\n          }                                                                                                         // 152\n        }                                                                                                           // 153\n      });                                                                                                           // 154\n    }                                                                                                               // 155\n                                                                                                                    // 156\n    __exports__.all = all;                                                                                          // 157\n  });                                                                                                               // 158\ndefine(\"promise/asap\",                                                                                              // 159\n  [\"exports\"],                                                                                                      // 160\n  function(__exports__) {                                                                                           // 161\n    \"use strict\";                                                                                                   // 162\n    var browserGlobal = (typeof window !== 'undefined') ? window : {};                                              // 163\n    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;           // 164\n    var local = (typeof global !== 'undefined') ? global : (this === undefined? window:this);                       // 165\n                                                                                                                    // 166\n    // node                                                                                                         // 167\n    function useNextTick() {                                                                                        // 168\n      return function() {                                                                                           // 169\n        process.nextTick(flush);                                                                                    // 170\n      };                                                                                                            // 171\n    }                                                                                                               // 172\n                                                                                                                    // 173\n    function useMutationObserver() {                                                                                // 174\n      var iterations = 0;                                                                                           // 175\n      var observer = new BrowserMutationObserver(flush);                                                            // 176\n      var node = document.createTextNode('');                                                                       // 177\n      observer.observe(node, { characterData: true });                                                              // 178\n                                                                                                                    // 179\n      return function() {                                                                                           // 180\n        node.data = (iterations = ++iterations % 2);                                                                // 181\n      };                                                                                                            // 182\n    }                                                                                                               // 183\n                                                                                                                    // 184\n    function useSetTimeout() {                                                                                      // 185\n      return function() {                                                                                           // 186\n        local.setTimeout(flush, 1);                                                                                 // 187\n      };                                                                                                            // 188\n    }                                                                                                               // 189\n                                                                                                                    // 190\n    var queue = [];                                                                                                 // 191\n    function flush() {                                                                                              // 192\n      for (var i = 0; i < queue.length; i++) {                                                                      // 193\n        var tuple = queue[i];                                                                                       // 194\n        var callback = tuple[0], arg = tuple[1];                                                                    // 195\n        callback(arg);                                                                                              // 196\n      }                                                                                                             // 197\n      queue = [];                                                                                                   // 198\n    }                                                                                                               // 199\n                                                                                                                    // 200\n    var scheduleFlush;                                                                                              // 201\n                                                                                                                    // 202\n    // Decide what async method to use to triggering processing of queued callbacks:                                // 203\n    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {                       // 204\n      scheduleFlush = useNextTick();                                                                                // 205\n    } else if (BrowserMutationObserver) {                                                                           // 206\n      scheduleFlush = useMutationObserver();                                                                        // 207\n    } else {                                                                                                        // 208\n      scheduleFlush = useSetTimeout();                                                                              // 209\n    }                                                                                                               // 210\n                                                                                                                    // 211\n    function asap(callback, arg) {                                                                                  // 212\n      var length = queue.push([callback, arg]);                                                                     // 213\n      if (length === 1) {                                                                                           // 214\n        // If length is 1, that means that we need to schedule an async flush.                                      // 215\n        // If additional callbacks are queued before the queue is flushed, they                                     // 216\n        // will be processed by this flush that we are scheduling.                                                  // 217\n        scheduleFlush();                                                                                            // 218\n      }                                                                                                             // 219\n    }                                                                                                               // 220\n                                                                                                                    // 221\n    __exports__.asap = asap;                                                                                        // 222\n  });                                                                                                               // 223\ndefine(\"promise/config\",                                                                                            // 224\n  [\"exports\"],                                                                                                      // 225\n  function(__exports__) {                                                                                           // 226\n    \"use strict\";                                                                                                   // 227\n    var config = {                                                                                                  // 228\n      instrument: false                                                                                             // 229\n    };                                                                                                              // 230\n                                                                                                                    // 231\n    function configure(name, value) {                                                                               // 232\n      if (arguments.length === 2) {                                                                                 // 233\n        config[name] = value;                                                                                       // 234\n      } else {                                                                                                      // 235\n        return config[name];                                                                                        // 236\n      }                                                                                                             // 237\n    }                                                                                                               // 238\n                                                                                                                    // 239\n    __exports__.config = config;                                                                                    // 240\n    __exports__.configure = configure;                                                                              // 241\n  });                                                                                                               // 242\ndefine(\"promise/polyfill\",                                                                                          // 243\n  [\"./promise\",\"./utils\",\"exports\"],                                                                                // 244\n  function(__dependency1__, __dependency2__, __exports__) {                                                         // 245\n    \"use strict\";                                                                                                   // 246\n    /*global self*/                                                                                                 // 247\n    var RSVPPromise = __dependency1__.Promise;                                                                      // 248\n    var isFunction = __dependency2__.isFunction;                                                                    // 249\n                                                                                                                    // 250\n    function polyfill() {                                                                                           // 251\n      var local;                                                                                                    // 252\n                                                                                                                    // 253\n      if (typeof global !== 'undefined') {                                                                          // 254\n        local = global;                                                                                             // 255\n      } else if (typeof window !== 'undefined' && window.document) {                                                // 256\n        local = window;                                                                                             // 257\n      } else {                                                                                                      // 258\n        local = self;                                                                                               // 259\n      }                                                                                                             // 260\n                                                                                                                    // 261\n      var es6PromiseSupport =                                                                                       // 262\n        \"Promise\" in local &&                                                                                       // 263\n        // Some of these methods are missing from                                                                   // 264\n        // Firefox/Chrome experimental implementations                                                              // 265\n        \"resolve\" in local.Promise &&                                                                               // 266\n        \"reject\" in local.Promise &&                                                                                // 267\n        \"all\" in local.Promise &&                                                                                   // 268\n        \"race\" in local.Promise &&                                                                                  // 269\n        // Older version of the spec had a resolver object                                                          // 270\n        // as the arg rather than a function                                                                        // 271\n        (function() {                                                                                               // 272\n          var resolve;                                                                                              // 273\n          new local.Promise(function(r) { resolve = r; });                                                          // 274\n          return isFunction(resolve);                                                                               // 275\n        }());                                                                                                       // 276\n                                                                                                                    // 277\n      if (!es6PromiseSupport) {                                                                                     // 278\n        local.Promise = RSVPPromise;                                                                                // 279\n      }                                                                                                             // 280\n    }                                                                                                               // 281\n                                                                                                                    // 282\n    __exports__.polyfill = polyfill;                                                                                // 283\n  });                                                                                                               // 284\ndefine(\"promise/promise\",                                                                                           // 285\n  [\"./config\",\"./utils\",\"./all\",\"./race\",\"./resolve\",\"./reject\",\"./asap\",\"exports\"],                                // 286\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __exports__) {\n    \"use strict\";                                                                                                   // 288\n    var config = __dependency1__.config;                                                                            // 289\n    var configure = __dependency1__.configure;                                                                      // 290\n    var objectOrFunction = __dependency2__.objectOrFunction;                                                        // 291\n    var isFunction = __dependency2__.isFunction;                                                                    // 292\n    var now = __dependency2__.now;                                                                                  // 293\n    var all = __dependency3__.all;                                                                                  // 294\n    var race = __dependency4__.race;                                                                                // 295\n    var staticResolve = __dependency5__.resolve;                                                                    // 296\n    var staticReject = __dependency6__.reject;                                                                      // 297\n    var asap = __dependency7__.asap;                                                                                // 298\n                                                                                                                    // 299\n    var counter = 0;                                                                                                // 300\n                                                                                                                    // 301\n    config.async = asap; // default async is asap;                                                                  // 302\n                                                                                                                    // 303\n    function Promise(resolver) {                                                                                    // 304\n      if (!isFunction(resolver)) {                                                                                  // 305\n        throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');  // 306\n      }                                                                                                             // 307\n                                                                                                                    // 308\n      if (!(this instanceof Promise)) {                                                                             // 309\n        throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n      }                                                                                                             // 311\n                                                                                                                    // 312\n      this._subscribers = [];                                                                                       // 313\n                                                                                                                    // 314\n      invokeResolver(resolver, this);                                                                               // 315\n    }                                                                                                               // 316\n                                                                                                                    // 317\n    function invokeResolver(resolver, promise) {                                                                    // 318\n      function resolvePromise(value) {                                                                              // 319\n        resolve(promise, value);                                                                                    // 320\n      }                                                                                                             // 321\n                                                                                                                    // 322\n      function rejectPromise(reason) {                                                                              // 323\n        reject(promise, reason);                                                                                    // 324\n      }                                                                                                             // 325\n                                                                                                                    // 326\n      try {                                                                                                         // 327\n        resolver(resolvePromise, rejectPromise);                                                                    // 328\n      } catch(e) {                                                                                                  // 329\n        rejectPromise(e);                                                                                           // 330\n      }                                                                                                             // 331\n    }                                                                                                               // 332\n                                                                                                                    // 333\n    function invokeCallback(settled, promise, callback, detail) {                                                   // 334\n      var hasCallback = isFunction(callback),                                                                       // 335\n          value, error, succeeded, failed;                                                                          // 336\n                                                                                                                    // 337\n      if (hasCallback) {                                                                                            // 338\n        try {                                                                                                       // 339\n          value = callback(detail);                                                                                 // 340\n          succeeded = true;                                                                                         // 341\n        } catch(e) {                                                                                                // 342\n          failed = true;                                                                                            // 343\n          error = e;                                                                                                // 344\n        }                                                                                                           // 345\n      } else {                                                                                                      // 346\n        value = detail;                                                                                             // 347\n        succeeded = true;                                                                                           // 348\n      }                                                                                                             // 349\n                                                                                                                    // 350\n      if (handleThenable(promise, value)) {                                                                         // 351\n        return;                                                                                                     // 352\n      } else if (hasCallback && succeeded) {                                                                        // 353\n        resolve(promise, value);                                                                                    // 354\n      } else if (failed) {                                                                                          // 355\n        reject(promise, error);                                                                                     // 356\n      } else if (settled === FULFILLED) {                                                                           // 357\n        resolve(promise, value);                                                                                    // 358\n      } else if (settled === REJECTED) {                                                                            // 359\n        reject(promise, value);                                                                                     // 360\n      }                                                                                                             // 361\n    }                                                                                                               // 362\n                                                                                                                    // 363\n    var PENDING   = void 0;                                                                                         // 364\n    var SEALED    = 0;                                                                                              // 365\n    var FULFILLED = 1;                                                                                              // 366\n    var REJECTED  = 2;                                                                                              // 367\n                                                                                                                    // 368\n    function subscribe(parent, child, onFulfillment, onRejection) {                                                 // 369\n      var subscribers = parent._subscribers;                                                                        // 370\n      var length = subscribers.length;                                                                              // 371\n                                                                                                                    // 372\n      subscribers[length] = child;                                                                                  // 373\n      subscribers[length + FULFILLED] = onFulfillment;                                                              // 374\n      subscribers[length + REJECTED]  = onRejection;                                                                // 375\n    }                                                                                                               // 376\n                                                                                                                    // 377\n    function publish(promise, settled) {                                                                            // 378\n      var child, callback, subscribers = promise._subscribers, detail = promise._detail;                            // 379\n                                                                                                                    // 380\n      for (var i = 0; i < subscribers.length; i += 3) {                                                             // 381\n        child = subscribers[i];                                                                                     // 382\n        callback = subscribers[i + settled];                                                                        // 383\n                                                                                                                    // 384\n        invokeCallback(settled, child, callback, detail);                                                           // 385\n      }                                                                                                             // 386\n                                                                                                                    // 387\n      promise._subscribers = null;                                                                                  // 388\n    }                                                                                                               // 389\n                                                                                                                    // 390\n    Promise.prototype = {                                                                                           // 391\n      constructor: Promise,                                                                                         // 392\n                                                                                                                    // 393\n      _state: undefined,                                                                                            // 394\n      _detail: undefined,                                                                                           // 395\n      _subscribers: undefined,                                                                                      // 396\n                                                                                                                    // 397\n      then: function(onFulfillment, onRejection) {                                                                  // 398\n        var promise = this;                                                                                         // 399\n                                                                                                                    // 400\n        var thenPromise = new this.constructor(function() {});                                                      // 401\n                                                                                                                    // 402\n        if (this._state) {                                                                                          // 403\n          var callbacks = arguments;                                                                                // 404\n          config.async(function invokePromiseCallback() {                                                           // 405\n            invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);            // 406\n          });                                                                                                       // 407\n        } else {                                                                                                    // 408\n          subscribe(this, thenPromise, onFulfillment, onRejection);                                                 // 409\n        }                                                                                                           // 410\n                                                                                                                    // 411\n        return thenPromise;                                                                                         // 412\n      },                                                                                                            // 413\n                                                                                                                    // 414\n      'catch': function(onRejection) {                                                                              // 415\n        return this.then(null, onRejection);                                                                        // 416\n      }                                                                                                             // 417\n    };                                                                                                              // 418\n                                                                                                                    // 419\n    Promise.all = all;                                                                                              // 420\n    Promise.race = race;                                                                                            // 421\n    Promise.resolve = staticResolve;                                                                                // 422\n    Promise.reject = staticReject;                                                                                  // 423\n                                                                                                                    // 424\n    function handleThenable(promise, value) {                                                                       // 425\n      var then = null,                                                                                              // 426\n      resolved;                                                                                                     // 427\n                                                                                                                    // 428\n      try {                                                                                                         // 429\n        if (promise === value) {                                                                                    // 430\n          throw new TypeError(\"A promises callback cannot return that same promise.\");                              // 431\n        }                                                                                                           // 432\n                                                                                                                    // 433\n        if (objectOrFunction(value)) {                                                                              // 434\n          then = value.then;                                                                                        // 435\n                                                                                                                    // 436\n          if (isFunction(then)) {                                                                                   // 437\n            then.call(value, function(val) {                                                                        // 438\n              if (resolved) { return true; }                                                                        // 439\n              resolved = true;                                                                                      // 440\n                                                                                                                    // 441\n              if (value !== val) {                                                                                  // 442\n                resolve(promise, val);                                                                              // 443\n              } else {                                                                                              // 444\n                fulfill(promise, val);                                                                              // 445\n              }                                                                                                     // 446\n            }, function(val) {                                                                                      // 447\n              if (resolved) { return true; }                                                                        // 448\n              resolved = true;                                                                                      // 449\n                                                                                                                    // 450\n              reject(promise, val);                                                                                 // 451\n            });                                                                                                     // 452\n                                                                                                                    // 453\n            return true;                                                                                            // 454\n          }                                                                                                         // 455\n        }                                                                                                           // 456\n      } catch (error) {                                                                                             // 457\n        if (resolved) { return true; }                                                                              // 458\n        reject(promise, error);                                                                                     // 459\n        return true;                                                                                                // 460\n      }                                                                                                             // 461\n                                                                                                                    // 462\n      return false;                                                                                                 // 463\n    }                                                                                                               // 464\n                                                                                                                    // 465\n    function resolve(promise, value) {                                                                              // 466\n      if (promise === value) {                                                                                      // 467\n        fulfill(promise, value);                                                                                    // 468\n      } else if (!handleThenable(promise, value)) {                                                                 // 469\n        fulfill(promise, value);                                                                                    // 470\n      }                                                                                                             // 471\n    }                                                                                                               // 472\n                                                                                                                    // 473\n    function fulfill(promise, value) {                                                                              // 474\n      if (promise._state !== PENDING) { return; }                                                                   // 475\n      promise._state = SEALED;                                                                                      // 476\n      promise._detail = value;                                                                                      // 477\n                                                                                                                    // 478\n      config.async(publishFulfillment, promise);                                                                    // 479\n    }                                                                                                               // 480\n                                                                                                                    // 481\n    function reject(promise, reason) {                                                                              // 482\n      if (promise._state !== PENDING) { return; }                                                                   // 483\n      promise._state = SEALED;                                                                                      // 484\n      promise._detail = reason;                                                                                     // 485\n                                                                                                                    // 486\n      config.async(publishRejection, promise);                                                                      // 487\n    }                                                                                                               // 488\n                                                                                                                    // 489\n    function publishFulfillment(promise) {                                                                          // 490\n      publish(promise, promise._state = FULFILLED);                                                                 // 491\n    }                                                                                                               // 492\n                                                                                                                    // 493\n    function publishRejection(promise) {                                                                            // 494\n      publish(promise, promise._state = REJECTED);                                                                  // 495\n    }                                                                                                               // 496\n                                                                                                                    // 497\n    __exports__.Promise = Promise;                                                                                  // 498\n  });                                                                                                               // 499\ndefine(\"promise/race\",                                                                                              // 500\n  [\"./utils\",\"exports\"],                                                                                            // 501\n  function(__dependency1__, __exports__) {                                                                          // 502\n    \"use strict\";                                                                                                   // 503\n    /* global toString */                                                                                           // 504\n    var isArray = __dependency1__.isArray;                                                                          // 505\n                                                                                                                    // 506\n    /**                                                                                                             // 507\n      `RSVP.race` allows you to watch a series of promises and act as soon as the                                   // 508\n      first promise given to the `promises` argument fulfills or rejects.                                           // 509\n                                                                                                                    // 510\n      Example:                                                                                                      // 511\n                                                                                                                    // 512\n      ```javascript                                                                                                 // 513\n      var promise1 = new RSVP.Promise(function(resolve, reject){                                                    // 514\n        setTimeout(function(){                                                                                      // 515\n          resolve(\"promise 1\");                                                                                     // 516\n        }, 200);                                                                                                    // 517\n      });                                                                                                           // 518\n                                                                                                                    // 519\n      var promise2 = new RSVP.Promise(function(resolve, reject){                                                    // 520\n        setTimeout(function(){                                                                                      // 521\n          resolve(\"promise 2\");                                                                                     // 522\n        }, 100);                                                                                                    // 523\n      });                                                                                                           // 524\n                                                                                                                    // 525\n      RSVP.race([promise1, promise2]).then(function(result){                                                        // 526\n        // result === \"promise 2\" because it was resolved before promise1                                           // 527\n        // was resolved.                                                                                            // 528\n      });                                                                                                           // 529\n      ```                                                                                                           // 530\n                                                                                                                    // 531\n      `RSVP.race` is deterministic in that only the state of the first completed                                    // 532\n      promise matters. For example, even if other promises given to the `promises`                                  // 533\n      array argument are resolved, but the first completed promise has become                                       // 534\n      rejected before the other promises became fulfilled, the returned promise                                     // 535\n      will become rejected:                                                                                         // 536\n                                                                                                                    // 537\n      ```javascript                                                                                                 // 538\n      var promise1 = new RSVP.Promise(function(resolve, reject){                                                    // 539\n        setTimeout(function(){                                                                                      // 540\n          resolve(\"promise 1\");                                                                                     // 541\n        }, 200);                                                                                                    // 542\n      });                                                                                                           // 543\n                                                                                                                    // 544\n      var promise2 = new RSVP.Promise(function(resolve, reject){                                                    // 545\n        setTimeout(function(){                                                                                      // 546\n          reject(new Error(\"promise 2\"));                                                                           // 547\n        }, 100);                                                                                                    // 548\n      });                                                                                                           // 549\n                                                                                                                    // 550\n      RSVP.race([promise1, promise2]).then(function(result){                                                        // 551\n        // Code here never runs because there are rejected promises!                                                // 552\n      }, function(reason){                                                                                          // 553\n        // reason.message === \"promise2\" because promise 2 became rejected before                                   // 554\n        // promise 1 became fulfilled                                                                               // 555\n      });                                                                                                           // 556\n      ```                                                                                                           // 557\n                                                                                                                    // 558\n      @method race                                                                                                  // 559\n      @for RSVP                                                                                                     // 560\n      @param {Array} promises array of promises to observe                                                          // 561\n      @param {String} label optional string for describing the promise returned.                                    // 562\n      Useful for tooling.                                                                                           // 563\n      @return {Promise} a promise that becomes fulfilled with the value the first                                   // 564\n      completed promises is resolved with if the first completed promise was                                        // 565\n      fulfilled, or rejected with the reason that the first completed promise                                       // 566\n      was rejected with.                                                                                            // 567\n    */                                                                                                              // 568\n    function race(promises) {                                                                                       // 569\n      /*jshint validthis:true */                                                                                    // 570\n      var Promise = this;                                                                                           // 571\n                                                                                                                    // 572\n      if (!isArray(promises)) {                                                                                     // 573\n        throw new TypeError('You must pass an array to race.');                                                     // 574\n      }                                                                                                             // 575\n      return new Promise(function(resolve, reject) {                                                                // 576\n        var results = [], promise;                                                                                  // 577\n                                                                                                                    // 578\n        for (var i = 0; i < promises.length; i++) {                                                                 // 579\n          promise = promises[i];                                                                                    // 580\n                                                                                                                    // 581\n          if (promise && typeof promise.then === 'function') {                                                      // 582\n            promise.then(resolve, reject);                                                                          // 583\n          } else {                                                                                                  // 584\n            resolve(promise);                                                                                       // 585\n          }                                                                                                         // 586\n        }                                                                                                           // 587\n      });                                                                                                           // 588\n    }                                                                                                               // 589\n                                                                                                                    // 590\n    __exports__.race = race;                                                                                        // 591\n  });                                                                                                               // 592\ndefine(\"promise/reject\",                                                                                            // 593\n  [\"exports\"],                                                                                                      // 594\n  function(__exports__) {                                                                                           // 595\n    \"use strict\";                                                                                                   // 596\n    /**                                                                                                             // 597\n      `RSVP.reject` returns a promise that will become rejected with the passed                                     // 598\n      `reason`. `RSVP.reject` is essentially shorthand for the following:                                           // 599\n                                                                                                                    // 600\n      ```javascript                                                                                                 // 601\n      var promise = new RSVP.Promise(function(resolve, reject){                                                     // 602\n        reject(new Error('WHOOPS'));                                                                                // 603\n      });                                                                                                           // 604\n                                                                                                                    // 605\n      promise.then(function(value){                                                                                 // 606\n        // Code here doesn't run because the promise is rejected!                                                   // 607\n      }, function(reason){                                                                                          // 608\n        // reason.message === 'WHOOPS'                                                                              // 609\n      });                                                                                                           // 610\n      ```                                                                                                           // 611\n                                                                                                                    // 612\n      Instead of writing the above, your code now simply becomes the following:                                     // 613\n                                                                                                                    // 614\n      ```javascript                                                                                                 // 615\n      var promise = RSVP.reject(new Error('WHOOPS'));                                                               // 616\n                                                                                                                    // 617\n      promise.then(function(value){                                                                                 // 618\n        // Code here doesn't run because the promise is rejected!                                                   // 619\n      }, function(reason){                                                                                          // 620\n        // reason.message === 'WHOOPS'                                                                              // 621\n      });                                                                                                           // 622\n      ```                                                                                                           // 623\n                                                                                                                    // 624\n      @method reject                                                                                                // 625\n      @for RSVP                                                                                                     // 626\n      @param {Any} reason value that the returned promise will be rejected with.                                    // 627\n      @param {String} label optional string for identifying the returned promise.                                   // 628\n      Useful for tooling.                                                                                           // 629\n      @return {Promise} a promise that will become rejected with the given                                          // 630\n      `reason`.                                                                                                     // 631\n    */                                                                                                              // 632\n    function reject(reason) {                                                                                       // 633\n      /*jshint validthis:true */                                                                                    // 634\n      var Promise = this;                                                                                           // 635\n                                                                                                                    // 636\n      return new Promise(function (resolve, reject) {                                                               // 637\n        reject(reason);                                                                                             // 638\n      });                                                                                                           // 639\n    }                                                                                                               // 640\n                                                                                                                    // 641\n    __exports__.reject = reject;                                                                                    // 642\n  });                                                                                                               // 643\ndefine(\"promise/resolve\",                                                                                           // 644\n  [\"exports\"],                                                                                                      // 645\n  function(__exports__) {                                                                                           // 646\n    \"use strict\";                                                                                                   // 647\n    function resolve(value) {                                                                                       // 648\n      /*jshint validthis:true */                                                                                    // 649\n      if (value && typeof value === 'object' && value.constructor === this) {                                       // 650\n        return value;                                                                                               // 651\n      }                                                                                                             // 652\n                                                                                                                    // 653\n      var Promise = this;                                                                                           // 654\n                                                                                                                    // 655\n      return new Promise(function(resolve) {                                                                        // 656\n        resolve(value);                                                                                             // 657\n      });                                                                                                           // 658\n    }                                                                                                               // 659\n                                                                                                                    // 660\n    __exports__.resolve = resolve;                                                                                  // 661\n  });                                                                                                               // 662\ndefine(\"promise/utils\",                                                                                             // 663\n  [\"exports\"],                                                                                                      // 664\n  function(__exports__) {                                                                                           // 665\n    \"use strict\";                                                                                                   // 666\n    function objectOrFunction(x) {                                                                                  // 667\n      return isFunction(x) || (typeof x === \"object\" && x !== null);                                                // 668\n    }                                                                                                               // 669\n                                                                                                                    // 670\n    function isFunction(x) {                                                                                        // 671\n      return typeof x === \"function\";                                                                               // 672\n    }                                                                                                               // 673\n                                                                                                                    // 674\n    function isArray(x) {                                                                                           // 675\n      return Object.prototype.toString.call(x) === \"[object Array]\";                                                // 676\n    }                                                                                                               // 677\n                                                                                                                    // 678\n    // Date.now is not available in browsers < IE9                                                                  // 679\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility      // 680\n    var now = Date.now || function() { return new Date().getTime(); };                                              // 681\n                                                                                                                    // 682\n                                                                                                                    // 683\n    __exports__.objectOrFunction = objectOrFunction;                                                                // 684\n    __exports__.isFunction = isFunction;                                                                            // 685\n    __exports__.isArray = isArray;                                                                                  // 686\n    __exports__.now = now;                                                                                          // 687\n  });                                                                                                               // 688\nrequireModule('promise/polyfill').polyfill();                                                                       // 689\n}());(function (global, factory) {                                                                                  // 690\n    if (typeof define === 'function' && define.amd) {                                                               // 691\n        define('localforageSerializer', ['exports', 'module'], factory);                                            // 692\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {                                   // 693\n        factory(exports, module);                                                                                   // 694\n    } else {                                                                                                        // 695\n        var mod = {                                                                                                 // 696\n            exports: {}                                                                                             // 697\n        };                                                                                                          // 698\n        factory(mod.exports, mod);                                                                                  // 699\n        global.localforageSerializer = mod.exports;                                                                 // 700\n    }                                                                                                               // 701\n})(this, function (exports, module) {                                                                               // 702\n    'use strict';                                                                                                   // 703\n                                                                                                                    // 704\n    (function () {                                                                                                  // 705\n        'use strict';                                                                                               // 706\n                                                                                                                    // 707\n        // Sadly, the best way to save binary data in WebSQL/localStorage is serializing                            // 708\n        // it to Base64, so this is how we store it to prevent very strange errors with less                        // 709\n        // verbose ways of binary <-> string data storage.                                                          // 710\n        var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                        // 711\n                                                                                                                    // 712\n        var BLOB_TYPE_PREFIX = '~~local_forage_type~';                                                              // 713\n        var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;                                               // 714\n                                                                                                                    // 715\n        var SERIALIZED_MARKER = '__lfsc__:';                                                                        // 716\n        var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;                                                    // 717\n                                                                                                                    // 718\n        // OMG the serializations!                                                                                  // 719\n        var TYPE_ARRAYBUFFER = 'arbf';                                                                              // 720\n        var TYPE_BLOB = 'blob';                                                                                     // 721\n        var TYPE_INT8ARRAY = 'si08';                                                                                // 722\n        var TYPE_UINT8ARRAY = 'ui08';                                                                               // 723\n        var TYPE_UINT8CLAMPEDARRAY = 'uic8';                                                                        // 724\n        var TYPE_INT16ARRAY = 'si16';                                                                               // 725\n        var TYPE_INT32ARRAY = 'si32';                                                                               // 726\n        var TYPE_UINT16ARRAY = 'ur16';                                                                              // 727\n        var TYPE_UINT32ARRAY = 'ui32';                                                                              // 728\n        var TYPE_FLOAT32ARRAY = 'fl32';                                                                             // 729\n        var TYPE_FLOAT64ARRAY = 'fl64';                                                                             // 730\n        var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;                     // 731\n                                                                                                                    // 732\n        // Get out of our habit of using `window` inline, at least.                                                 // 733\n        var globalObject = this;                                                                                    // 734\n                                                                                                                    // 735\n        // Abstracts constructing a Blob object, so it also works in older                                          // 736\n        // browsers that don't support the native Blob constructor. (i.e.                                           // 737\n        // old QtWebKit versions, at least).                                                                        // 738\n        function _createBlob(parts, properties) {                                                                   // 739\n            parts = parts || [];                                                                                    // 740\n            properties = properties || {};                                                                          // 741\n                                                                                                                    // 742\n            try {                                                                                                   // 743\n                return new Blob(parts, properties);                                                                 // 744\n            } catch (err) {                                                                                         // 745\n                if (err.name !== 'TypeError') {                                                                     // 746\n                    throw err;                                                                                      // 747\n                }                                                                                                   // 748\n                                                                                                                    // 749\n                var BlobBuilder = globalObject.BlobBuilder || globalObject.MSBlobBuilder || globalObject.MozBlobBuilder || globalObject.WebKitBlobBuilder;\n                                                                                                                    // 751\n                var builder = new BlobBuilder();                                                                    // 752\n                for (var i = 0; i < parts.length; i += 1) {                                                         // 753\n                    builder.append(parts[i]);                                                                       // 754\n                }                                                                                                   // 755\n                                                                                                                    // 756\n                return builder.getBlob(properties.type);                                                            // 757\n            }                                                                                                       // 758\n        }                                                                                                           // 759\n                                                                                                                    // 760\n        // Serialize a value, afterwards executing a callback (which usually                                        // 761\n        // instructs the `setItem()` callback/promise to be executed). This is how                                  // 762\n        // we store binary data with localStorage.                                                                  // 763\n        function serialize(value, callback) {                                                                       // 764\n            var valueString = '';                                                                                   // 765\n            if (value) {                                                                                            // 766\n                valueString = value.toString();                                                                     // 767\n            }                                                                                                       // 768\n                                                                                                                    // 769\n            // Cannot use `value instanceof ArrayBuffer` or such here, as these                                     // 770\n            // checks fail when running the tests using casper.js...                                                // 771\n            //                                                                                                      // 772\n            // TODO: See why those tests fail and use a better solution.                                            // 773\n            if (value && (value.toString() === '[object ArrayBuffer]' || value.buffer && value.buffer.toString() === '[object ArrayBuffer]')) {\n                // Convert binary arrays to a string and prefix the string with                                     // 775\n                // a special marker.                                                                                // 776\n                var buffer;                                                                                         // 777\n                var marker = SERIALIZED_MARKER;                                                                     // 778\n                                                                                                                    // 779\n                if (value instanceof ArrayBuffer) {                                                                 // 780\n                    buffer = value;                                                                                 // 781\n                    marker += TYPE_ARRAYBUFFER;                                                                     // 782\n                } else {                                                                                            // 783\n                    buffer = value.buffer;                                                                          // 784\n                                                                                                                    // 785\n                    if (valueString === '[object Int8Array]') {                                                     // 786\n                        marker += TYPE_INT8ARRAY;                                                                   // 787\n                    } else if (valueString === '[object Uint8Array]') {                                             // 788\n                        marker += TYPE_UINT8ARRAY;                                                                  // 789\n                    } else if (valueString === '[object Uint8ClampedArray]') {                                      // 790\n                        marker += TYPE_UINT8CLAMPEDARRAY;                                                           // 791\n                    } else if (valueString === '[object Int16Array]') {                                             // 792\n                        marker += TYPE_INT16ARRAY;                                                                  // 793\n                    } else if (valueString === '[object Uint16Array]') {                                            // 794\n                        marker += TYPE_UINT16ARRAY;                                                                 // 795\n                    } else if (valueString === '[object Int32Array]') {                                             // 796\n                        marker += TYPE_INT32ARRAY;                                                                  // 797\n                    } else if (valueString === '[object Uint32Array]') {                                            // 798\n                        marker += TYPE_UINT32ARRAY;                                                                 // 799\n                    } else if (valueString === '[object Float32Array]') {                                           // 800\n                        marker += TYPE_FLOAT32ARRAY;                                                                // 801\n                    } else if (valueString === '[object Float64Array]') {                                           // 802\n                        marker += TYPE_FLOAT64ARRAY;                                                                // 803\n                    } else {                                                                                        // 804\n                        callback(new Error('Failed to get type for BinaryArray'));                                  // 805\n                    }                                                                                               // 806\n                }                                                                                                   // 807\n                                                                                                                    // 808\n                callback(marker + bufferToString(buffer));                                                          // 809\n            } else if (valueString === '[object Blob]') {                                                           // 810\n                // Conver the blob to a binaryArray and then to a string.                                           // 811\n                var fileReader = new FileReader();                                                                  // 812\n                                                                                                                    // 813\n                fileReader.onload = function () {                                                                   // 814\n                    // Backwards-compatible prefix for the blob type.                                               // 815\n                    var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);                    // 816\n                                                                                                                    // 817\n                    callback(SERIALIZED_MARKER + TYPE_BLOB + str);                                                  // 818\n                };                                                                                                  // 819\n                                                                                                                    // 820\n                fileReader.readAsArrayBuffer(value);                                                                // 821\n            } else {                                                                                                // 822\n                try {                                                                                               // 823\n                    callback(JSON.stringify(value));                                                                // 824\n                } catch (e) {                                                                                       // 825\n                    console.error(\"Couldn't convert value into a JSON string: \", value);                            // 826\n                                                                                                                    // 827\n                    callback(null, e);                                                                              // 828\n                }                                                                                                   // 829\n            }                                                                                                       // 830\n        }                                                                                                           // 831\n                                                                                                                    // 832\n        // Deserialize data we've inserted into a value column/field. We place                                      // 833\n        // special markers into our strings to mark them as encoded; this isn't                                     // 834\n        // as nice as a meta field, but it's the only sane thing we can do whilst                                   // 835\n        // keeping localStorage support intact.                                                                     // 836\n        //                                                                                                          // 837\n        // Oftentimes this will just deserialize JSON content, but if we have a                                     // 838\n        // special marker (SERIALIZED_MARKER, defined above), we will extract                                       // 839\n        // some kind of arraybuffer/binary data/typed array out of the string.                                      // 840\n        function deserialize(value) {                                                                               // 841\n            // If we haven't marked this string as being specially serialized (i.e.                                 // 842\n            // something other than serialized JSON), we can just return it and be                                  // 843\n            // done with it.                                                                                        // 844\n            if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {                               // 845\n                return JSON.parse(value);                                                                           // 846\n            }                                                                                                       // 847\n                                                                                                                    // 848\n            // The following code deals with deserializing some kind of Blob or                                     // 849\n            // TypedArray. First we separate out the type of data we're dealing                                     // 850\n            // with from the data itself.                                                                           // 851\n            var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);                                  // 852\n            var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);                    // 853\n                                                                                                                    // 854\n            var blobType;                                                                                           // 855\n            // Backwards-compatible blob type serialization strategy.                                               // 856\n            // DBs created with older versions of localForage will simply not have the blob type.                   // 857\n            if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {                              // 858\n                var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);                                       // 859\n                blobType = matcher[1];                                                                              // 860\n                serializedString = serializedString.substring(matcher[0].length);                                   // 861\n            }                                                                                                       // 862\n            var buffer = stringToBuffer(serializedString);                                                          // 863\n                                                                                                                    // 864\n            // Return the right type based on the code/type set during                                              // 865\n            // serialization.                                                                                       // 866\n            switch (type) {                                                                                         // 867\n                case TYPE_ARRAYBUFFER:                                                                              // 868\n                    return buffer;                                                                                  // 869\n                case TYPE_BLOB:                                                                                     // 870\n                    return _createBlob([buffer], { type: blobType });                                               // 871\n                case TYPE_INT8ARRAY:                                                                                // 872\n                    return new Int8Array(buffer);                                                                   // 873\n                case TYPE_UINT8ARRAY:                                                                               // 874\n                    return new Uint8Array(buffer);                                                                  // 875\n                case TYPE_UINT8CLAMPEDARRAY:                                                                        // 876\n                    return new Uint8ClampedArray(buffer);                                                           // 877\n                case TYPE_INT16ARRAY:                                                                               // 878\n                    return new Int16Array(buffer);                                                                  // 879\n                case TYPE_UINT16ARRAY:                                                                              // 880\n                    return new Uint16Array(buffer);                                                                 // 881\n                case TYPE_INT32ARRAY:                                                                               // 882\n                    return new Int32Array(buffer);                                                                  // 883\n                case TYPE_UINT32ARRAY:                                                                              // 884\n                    return new Uint32Array(buffer);                                                                 // 885\n                case TYPE_FLOAT32ARRAY:                                                                             // 886\n                    return new Float32Array(buffer);                                                                // 887\n                case TYPE_FLOAT64ARRAY:                                                                             // 888\n                    return new Float64Array(buffer);                                                                // 889\n                default:                                                                                            // 890\n                    throw new Error('Unkown type: ' + type);                                                        // 891\n            }                                                                                                       // 892\n        }                                                                                                           // 893\n                                                                                                                    // 894\n        function stringToBuffer(serializedString) {                                                                 // 895\n            // Fill the string into a ArrayBuffer.                                                                  // 896\n            var bufferLength = serializedString.length * 0.75;                                                      // 897\n            var len = serializedString.length;                                                                      // 898\n            var i;                                                                                                  // 899\n            var p = 0;                                                                                              // 900\n            var encoded1, encoded2, encoded3, encoded4;                                                             // 901\n                                                                                                                    // 902\n            if (serializedString[serializedString.length - 1] === '=') {                                            // 903\n                bufferLength--;                                                                                     // 904\n                if (serializedString[serializedString.length - 2] === '=') {                                        // 905\n                    bufferLength--;                                                                                 // 906\n                }                                                                                                   // 907\n            }                                                                                                       // 908\n                                                                                                                    // 909\n            var buffer = new ArrayBuffer(bufferLength);                                                             // 910\n            var bytes = new Uint8Array(buffer);                                                                     // 911\n                                                                                                                    // 912\n            for (i = 0; i < len; i += 4) {                                                                          // 913\n                encoded1 = BASE_CHARS.indexOf(serializedString[i]);                                                 // 914\n                encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);                                             // 915\n                encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);                                             // 916\n                encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);                                             // 917\n                                                                                                                    // 918\n                /*jslint bitwise: true */                                                                           // 919\n                bytes[p++] = encoded1 << 2 | encoded2 >> 4;                                                         // 920\n                bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;                                                  // 921\n                bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;                                                   // 922\n            }                                                                                                       // 923\n            return buffer;                                                                                          // 924\n        }                                                                                                           // 925\n                                                                                                                    // 926\n        // Converts a buffer to a string to store, serialized, in the backend                                       // 927\n        // storage library.                                                                                         // 928\n        function bufferToString(buffer) {                                                                           // 929\n            // base64-arraybuffer                                                                                   // 930\n            var bytes = new Uint8Array(buffer);                                                                     // 931\n            var base64String = '';                                                                                  // 932\n            var i;                                                                                                  // 933\n                                                                                                                    // 934\n            for (i = 0; i < bytes.length; i += 3) {                                                                 // 935\n                /*jslint bitwise: true */                                                                           // 936\n                base64String += BASE_CHARS[bytes[i] >> 2];                                                          // 937\n                base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];                                // 938\n                base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];                           // 939\n                base64String += BASE_CHARS[bytes[i + 2] & 63];                                                      // 940\n            }                                                                                                       // 941\n                                                                                                                    // 942\n            if (bytes.length % 3 === 2) {                                                                           // 943\n                base64String = base64String.substring(0, base64String.length - 1) + '=';                            // 944\n            } else if (bytes.length % 3 === 1) {                                                                    // 945\n                base64String = base64String.substring(0, base64String.length - 2) + '==';                           // 946\n            }                                                                                                       // 947\n                                                                                                                    // 948\n            return base64String;                                                                                    // 949\n        }                                                                                                           // 950\n                                                                                                                    // 951\n        var localforageSerializer = {                                                                               // 952\n            serialize: serialize,                                                                                   // 953\n            deserialize: deserialize,                                                                               // 954\n            stringToBuffer: stringToBuffer,                                                                         // 955\n            bufferToString: bufferToString                                                                          // 956\n        };                                                                                                          // 957\n                                                                                                                    // 958\n        module.exports = localforageSerializer;                                                                     // 959\n    }).call(typeof window !== 'undefined' ? window : self);                                                         // 960\n});                                                                                                                 // 961\n(function (global, factory) {                                                                                       // 962\n    if (typeof define === 'function' && define.amd) {                                                               // 963\n        define('asyncStorage', ['exports', 'module'], factory);                                                     // 964\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {                                   // 965\n        factory(exports, module);                                                                                   // 966\n    } else {                                                                                                        // 967\n        var mod = {                                                                                                 // 968\n            exports: {}                                                                                             // 969\n        };                                                                                                          // 970\n        factory(mod.exports, mod);                                                                                  // 971\n        global.asyncStorage = mod.exports;                                                                          // 972\n    }                                                                                                               // 973\n})(this, function (exports, module) {                                                                               // 974\n    // Some code originally from async_storage.js in                                                                // 975\n    // [Gaia](https://github.com/mozilla-b2g/gaia).                                                                 // 976\n    'use strict';                                                                                                   // 977\n                                                                                                                    // 978\n    (function () {                                                                                                  // 979\n        'use strict';                                                                                               // 980\n                                                                                                                    // 981\n        var globalObject = this;                                                                                    // 982\n        // Initialize IndexedDB; fall back to vendor-prefixed versions if needed.                                   // 983\n        var indexedDB = indexedDB || this.indexedDB || this.webkitIndexedDB || this.mozIndexedDB || this.OIndexedDB || this.msIndexedDB;\n                                                                                                                    // 985\n        // If IndexedDB isn't available, we get outta here!                                                         // 986\n        if (!indexedDB) {                                                                                           // 987\n            return;                                                                                                 // 988\n        }                                                                                                           // 989\n                                                                                                                    // 990\n        var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';                                         // 991\n        var supportsBlobs;                                                                                          // 992\n                                                                                                                    // 993\n        // Abstracts constructing a Blob object, so it also works in older                                          // 994\n        // browsers that don't support the native Blob constructor. (i.e.                                           // 995\n        // old QtWebKit versions, at least).                                                                        // 996\n        function _createBlob(parts, properties) {                                                                   // 997\n            parts = parts || [];                                                                                    // 998\n            properties = properties || {};                                                                          // 999\n            try {                                                                                                   // 1000\n                return new Blob(parts, properties);                                                                 // 1001\n            } catch (e) {                                                                                           // 1002\n                if (e.name !== 'TypeError') {                                                                       // 1003\n                    throw e;                                                                                        // 1004\n                }                                                                                                   // 1005\n                var BlobBuilder = globalObject.BlobBuilder || globalObject.MSBlobBuilder || globalObject.MozBlobBuilder || globalObject.WebKitBlobBuilder;\n                var builder = new BlobBuilder();                                                                    // 1007\n                for (var i = 0; i < parts.length; i += 1) {                                                         // 1008\n                    builder.append(parts[i]);                                                                       // 1009\n                }                                                                                                   // 1010\n                return builder.getBlob(properties.type);                                                            // 1011\n            }                                                                                                       // 1012\n        }                                                                                                           // 1013\n                                                                                                                    // 1014\n        // Transform a binary string to an array buffer, because otherwise                                          // 1015\n        // weird stuff happens when you try to work with the binary string directly.                                // 1016\n        // It is known.                                                                                             // 1017\n        // From http://stackoverflow.com/questions/14967647/ (continues on next line)                               // 1018\n        // encode-decode-image-with-base64-breaks-image (2013-04-21)                                                // 1019\n        function _binStringToArrayBuffer(bin) {                                                                     // 1020\n            var length = bin.length;                                                                                // 1021\n            var buf = new ArrayBuffer(length);                                                                      // 1022\n            var arr = new Uint8Array(buf);                                                                          // 1023\n            for (var i = 0; i < length; i++) {                                                                      // 1024\n                arr[i] = bin.charCodeAt(i);                                                                         // 1025\n            }                                                                                                       // 1026\n            return buf;                                                                                             // 1027\n        }                                                                                                           // 1028\n                                                                                                                    // 1029\n        // Fetch a blob using ajax. This reveals bugs in Chrome < 43.                                               // 1030\n        // For details on all this junk:                                                                            // 1031\n        // https://github.com/nolanlawson/state-of-binary-data-in-the-browser#readme                                // 1032\n        function _blobAjax(url) {                                                                                   // 1033\n            return new Promise(function (resolve, reject) {                                                         // 1034\n                var xhr = new XMLHttpRequest();                                                                     // 1035\n                xhr.open('GET', url);                                                                               // 1036\n                xhr.withCredentials = true;                                                                         // 1037\n                xhr.responseType = 'arraybuffer';                                                                   // 1038\n                                                                                                                    // 1039\n                xhr.onreadystatechange = function () {                                                              // 1040\n                    if (xhr.readyState !== 4) {                                                                     // 1041\n                        return;                                                                                     // 1042\n                    }                                                                                               // 1043\n                    if (xhr.status === 200) {                                                                       // 1044\n                        return resolve({                                                                            // 1045\n                            response: xhr.response,                                                                 // 1046\n                            type: xhr.getResponseHeader('Content-Type')                                             // 1047\n                        });                                                                                         // 1048\n                    }                                                                                               // 1049\n                    reject({ status: xhr.status, response: xhr.response });                                         // 1050\n                };                                                                                                  // 1051\n                xhr.send();                                                                                         // 1052\n            });                                                                                                     // 1053\n        }                                                                                                           // 1054\n                                                                                                                    // 1055\n        //                                                                                                          // 1056\n        // Detect blob support. Chrome didn't support it until version 38.                                          // 1057\n        // In version 37 they had a broken version where PNGs (and possibly                                         // 1058\n        // other binary types) aren't stored correctly, because when you fetch                                      // 1059\n        // them, the content type is always null.                                                                   // 1060\n        //                                                                                                          // 1061\n        // Furthermore, they have some outstanding bugs where blobs occasionally                                    // 1062\n        // are read by FileReader as null, or by ajax as 404s.                                                      // 1063\n        //                                                                                                          // 1064\n        // Sadly we use the 404 bug to detect the FileReader bug, so if they                                        // 1065\n        // get fixed independently and released in different versions of Chrome,                                    // 1066\n        // then the bug could come back. So it's worthwhile to watch these issues:                                  // 1067\n        // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916                                      // 1068\n        // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836                               // 1069\n        //                                                                                                          // 1070\n        function _checkBlobSupportWithoutCaching(idb) {                                                             // 1071\n            return new Promise(function (resolve, reject) {                                                         // 1072\n                var blob = _createBlob([''], { type: 'image/png' });                                                // 1073\n                var txn = idb.transaction([DETECT_BLOB_SUPPORT_STORE], 'readwrite');                                // 1074\n                txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');                                        // 1075\n                txn.oncomplete = function () {                                                                      // 1076\n                    // have to do it in a separate transaction, else the correct                                    // 1077\n                    // content type is always returned                                                              // 1078\n                    var blobTxn = idb.transaction([DETECT_BLOB_SUPPORT_STORE], 'readwrite');                        // 1079\n                    var getBlobReq = blobTxn.objectStore(DETECT_BLOB_SUPPORT_STORE).get('key');                     // 1080\n                    getBlobReq.onerror = reject;                                                                    // 1081\n                    getBlobReq.onsuccess = function (e) {                                                           // 1082\n                                                                                                                    // 1083\n                        var storedBlob = e.target.result;                                                           // 1084\n                        var url = URL.createObjectURL(storedBlob);                                                  // 1085\n                                                                                                                    // 1086\n                        _blobAjax(url).then(function (res) {                                                        // 1087\n                            resolve(!!(res && res.type === 'image/png'));                                           // 1088\n                        }, function () {                                                                            // 1089\n                            resolve(false);                                                                         // 1090\n                        }).then(function () {                                                                       // 1091\n                            URL.revokeObjectURL(url);                                                               // 1092\n                        });                                                                                         // 1093\n                    };                                                                                              // 1094\n                };                                                                                                  // 1095\n            })['catch'](function () {                                                                               // 1096\n                return false; // error, so assume unsupported                                                       // 1097\n            });                                                                                                     // 1098\n        }                                                                                                           // 1099\n                                                                                                                    // 1100\n        function _checkBlobSupport(idb) {                                                                           // 1101\n            if (typeof supportsBlobs === 'boolean') {                                                               // 1102\n                return Promise.resolve(supportsBlobs);                                                              // 1103\n            }                                                                                                       // 1104\n            return _checkBlobSupportWithoutCaching(idb).then(function (value) {                                     // 1105\n                supportsBlobs = value;                                                                              // 1106\n                return supportsBlobs;                                                                               // 1107\n            });                                                                                                     // 1108\n        }                                                                                                           // 1109\n                                                                                                                    // 1110\n        // encode a blob for indexeddb engines that don't support blobs                                             // 1111\n        function _encodeBlob(blob) {                                                                                // 1112\n            return new Promise(function (resolve, reject) {                                                         // 1113\n                var reader = new FileReader();                                                                      // 1114\n                reader.onerror = reject;                                                                            // 1115\n                reader.onloadend = function (e) {                                                                   // 1116\n                    var base64 = btoa(e.target.result || '');                                                       // 1117\n                    resolve({                                                                                       // 1118\n                        __local_forage_encoded_blob: true,                                                          // 1119\n                        data: base64,                                                                               // 1120\n                        type: blob.type                                                                             // 1121\n                    });                                                                                             // 1122\n                };                                                                                                  // 1123\n                reader.readAsBinaryString(blob);                                                                    // 1124\n            });                                                                                                     // 1125\n        }                                                                                                           // 1126\n                                                                                                                    // 1127\n        // decode an encoded blob                                                                                   // 1128\n        function _decodeBlob(encodedBlob) {                                                                         // 1129\n            var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));                                        // 1130\n            return _createBlob([arrayBuff], { type: encodedBlob.type });                                            // 1131\n        }                                                                                                           // 1132\n                                                                                                                    // 1133\n        // is this one of our fancy encoded blobs?                                                                  // 1134\n        function _isEncodedBlob(value) {                                                                            // 1135\n            return value && value.__local_forage_encoded_blob;                                                      // 1136\n        }                                                                                                           // 1137\n                                                                                                                    // 1138\n        // Open the IndexedDB database (automatically creates one if one didn't                                     // 1139\n        // previously exist), using any options set in the config.                                                  // 1140\n        function _initStorage(options) {                                                                            // 1141\n            var self = this;                                                                                        // 1142\n            var dbInfo = {                                                                                          // 1143\n                db: null                                                                                            // 1144\n            };                                                                                                      // 1145\n                                                                                                                    // 1146\n            if (options) {                                                                                          // 1147\n                for (var i in options) {                                                                            // 1148\n                    dbInfo[i] = options[i];                                                                         // 1149\n                }                                                                                                   // 1150\n            }                                                                                                       // 1151\n                                                                                                                    // 1152\n            return new Promise(function (resolve, reject) {                                                         // 1153\n                var openreq = indexedDB.open(dbInfo.name, dbInfo.version);                                          // 1154\n                openreq.onerror = function () {                                                                     // 1155\n                    reject(openreq.error);                                                                          // 1156\n                };                                                                                                  // 1157\n                openreq.onupgradeneeded = function (e) {                                                            // 1158\n                    // First time setup: create an empty object store                                               // 1159\n                    openreq.result.createObjectStore(dbInfo.storeName);                                             // 1160\n                    if (e.oldVersion <= 1) {                                                                        // 1161\n                        // added when support for blob shims was added                                              // 1162\n                        openreq.result.createObjectStore(DETECT_BLOB_SUPPORT_STORE);                                // 1163\n                    }                                                                                               // 1164\n                };                                                                                                  // 1165\n                openreq.onsuccess = function () {                                                                   // 1166\n                    dbInfo.db = openreq.result;                                                                     // 1167\n                    self._dbInfo = dbInfo;                                                                          // 1168\n                    resolve();                                                                                      // 1169\n                };                                                                                                  // 1170\n            });                                                                                                     // 1171\n        }                                                                                                           // 1172\n                                                                                                                    // 1173\n        function getItem(key, callback) {                                                                           // 1174\n            var self = this;                                                                                        // 1175\n                                                                                                                    // 1176\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1177\n            if (typeof key !== 'string') {                                                                          // 1178\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1179\n                key = String(key);                                                                                  // 1180\n            }                                                                                                       // 1181\n                                                                                                                    // 1182\n            var promise = new Promise(function (resolve, reject) {                                                  // 1183\n                self.ready().then(function () {                                                                     // 1184\n                    var dbInfo = self._dbInfo;                                                                      // 1185\n                    var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);  // 1186\n                    var req = store.get(key);                                                                       // 1187\n                                                                                                                    // 1188\n                    req.onsuccess = function () {                                                                   // 1189\n                        var value = req.result;                                                                     // 1190\n                        if (value === undefined) {                                                                  // 1191\n                            value = null;                                                                           // 1192\n                        }                                                                                           // 1193\n                        if (_isEncodedBlob(value)) {                                                                // 1194\n                            value = _decodeBlob(value);                                                             // 1195\n                        }                                                                                           // 1196\n                        resolve(value);                                                                             // 1197\n                    };                                                                                              // 1198\n                                                                                                                    // 1199\n                    req.onerror = function () {                                                                     // 1200\n                        reject(req.error);                                                                          // 1201\n                    };                                                                                              // 1202\n                })['catch'](reject);                                                                                // 1203\n            });                                                                                                     // 1204\n                                                                                                                    // 1205\n            executeCallback(promise, callback);                                                                     // 1206\n            return promise;                                                                                         // 1207\n        }                                                                                                           // 1208\n                                                                                                                    // 1209\n        // Iterate over all items stored in database.                                                               // 1210\n        function iterate(iterator, callback) {                                                                      // 1211\n            var self = this;                                                                                        // 1212\n                                                                                                                    // 1213\n            var promise = new Promise(function (resolve, reject) {                                                  // 1214\n                self.ready().then(function () {                                                                     // 1215\n                    var dbInfo = self._dbInfo;                                                                      // 1216\n                    var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);  // 1217\n                                                                                                                    // 1218\n                    var req = store.openCursor();                                                                   // 1219\n                    var iterationNumber = 1;                                                                        // 1220\n                                                                                                                    // 1221\n                    req.onsuccess = function () {                                                                   // 1222\n                        var cursor = req.result;                                                                    // 1223\n                                                                                                                    // 1224\n                        if (cursor) {                                                                               // 1225\n                            var value = cursor.value;                                                               // 1226\n                            if (_isEncodedBlob(value)) {                                                            // 1227\n                                value = _decodeBlob(value);                                                         // 1228\n                            }                                                                                       // 1229\n                            var result = iterator(value, cursor.key, iterationNumber++);                            // 1230\n                                                                                                                    // 1231\n                            if (result !== void 0) {                                                                // 1232\n                                resolve(result);                                                                    // 1233\n                            } else {                                                                                // 1234\n                                cursor['continue']();                                                               // 1235\n                            }                                                                                       // 1236\n                        } else {                                                                                    // 1237\n                            resolve();                                                                              // 1238\n                        }                                                                                           // 1239\n                    };                                                                                              // 1240\n                                                                                                                    // 1241\n                    req.onerror = function () {                                                                     // 1242\n                        reject(req.error);                                                                          // 1243\n                    };                                                                                              // 1244\n                })['catch'](reject);                                                                                // 1245\n            });                                                                                                     // 1246\n                                                                                                                    // 1247\n            executeCallback(promise, callback);                                                                     // 1248\n                                                                                                                    // 1249\n            return promise;                                                                                         // 1250\n        }                                                                                                           // 1251\n                                                                                                                    // 1252\n        function setItem(key, value, callback) {                                                                    // 1253\n            var self = this;                                                                                        // 1254\n                                                                                                                    // 1255\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1256\n            if (typeof key !== 'string') {                                                                          // 1257\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1258\n                key = String(key);                                                                                  // 1259\n            }                                                                                                       // 1260\n                                                                                                                    // 1261\n            var promise = new Promise(function (resolve, reject) {                                                  // 1262\n                var dbInfo;                                                                                         // 1263\n                self.ready().then(function () {                                                                     // 1264\n                    dbInfo = self._dbInfo;                                                                          // 1265\n                    return _checkBlobSupport(dbInfo.db);                                                            // 1266\n                }).then(function (blobSupport) {                                                                    // 1267\n                    if (!blobSupport && value instanceof Blob) {                                                    // 1268\n                        return _encodeBlob(value);                                                                  // 1269\n                    }                                                                                               // 1270\n                    return value;                                                                                   // 1271\n                }).then(function (value) {                                                                          // 1272\n                    var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');                         // 1273\n                    var store = transaction.objectStore(dbInfo.storeName);                                          // 1274\n                                                                                                                    // 1275\n                    // The reason we don't _save_ null is because IE 10 does                                        // 1276\n                    // not support saving the `null` type in IndexedDB. How                                         // 1277\n                    // ironic, given the bug below!                                                                 // 1278\n                    // See: https://github.com/mozilla/localForage/issues/161                                       // 1279\n                    if (value === null) {                                                                           // 1280\n                        value = undefined;                                                                          // 1281\n                    }                                                                                               // 1282\n                                                                                                                    // 1283\n                    var req = store.put(value, key);                                                                // 1284\n                    transaction.oncomplete = function () {                                                          // 1285\n                        // Cast to undefined so the value passed to                                                 // 1286\n                        // callback/promise is the same as what one would get out                                   // 1287\n                        // of `getItem()` later. This leads to some weirdness                                       // 1288\n                        // (setItem('foo', undefined) will return `null`), but                                      // 1289\n                        // it's not my fault localStorage is our baseline and that                                  // 1290\n                        // it's weird.                                                                              // 1291\n                        if (value === undefined) {                                                                  // 1292\n                            value = null;                                                                           // 1293\n                        }                                                                                           // 1294\n                                                                                                                    // 1295\n                        resolve(value);                                                                             // 1296\n                    };                                                                                              // 1297\n                    transaction.onabort = transaction.onerror = function () {                                       // 1298\n                        var err = req.error ? req.error : req.transaction.error;                                    // 1299\n                        reject(err);                                                                                // 1300\n                    };                                                                                              // 1301\n                })['catch'](reject);                                                                                // 1302\n            });                                                                                                     // 1303\n                                                                                                                    // 1304\n            executeCallback(promise, callback);                                                                     // 1305\n            return promise;                                                                                         // 1306\n        }                                                                                                           // 1307\n                                                                                                                    // 1308\n        function removeItem(key, callback) {                                                                        // 1309\n            var self = this;                                                                                        // 1310\n                                                                                                                    // 1311\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1312\n            if (typeof key !== 'string') {                                                                          // 1313\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1314\n                key = String(key);                                                                                  // 1315\n            }                                                                                                       // 1316\n                                                                                                                    // 1317\n            var promise = new Promise(function (resolve, reject) {                                                  // 1318\n                self.ready().then(function () {                                                                     // 1319\n                    var dbInfo = self._dbInfo;                                                                      // 1320\n                    var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');                         // 1321\n                    var store = transaction.objectStore(dbInfo.storeName);                                          // 1322\n                                                                                                                    // 1323\n                    // We use a Grunt task to make this safe for IE and some                                        // 1324\n                    // versions of Android (including those used by Cordova).                                       // 1325\n                    // Normally IE won't like `.delete()` and will insist on                                        // 1326\n                    // using `['delete']()`, but we have a build step that                                          // 1327\n                    // fixes this for us now.                                                                       // 1328\n                    var req = store['delete'](key);                                                                 // 1329\n                    transaction.oncomplete = function () {                                                          // 1330\n                        resolve();                                                                                  // 1331\n                    };                                                                                              // 1332\n                                                                                                                    // 1333\n                    transaction.onerror = function () {                                                             // 1334\n                        reject(req.error);                                                                          // 1335\n                    };                                                                                              // 1336\n                                                                                                                    // 1337\n                    // The request will be also be aborted if we've exceeded our storage                            // 1338\n                    // space.                                                                                       // 1339\n                    transaction.onabort = function () {                                                             // 1340\n                        var err = req.error ? req.error : req.transaction.error;                                    // 1341\n                        reject(err);                                                                                // 1342\n                    };                                                                                              // 1343\n                })['catch'](reject);                                                                                // 1344\n            });                                                                                                     // 1345\n                                                                                                                    // 1346\n            executeCallback(promise, callback);                                                                     // 1347\n            return promise;                                                                                         // 1348\n        }                                                                                                           // 1349\n                                                                                                                    // 1350\n        function clear(callback) {                                                                                  // 1351\n            var self = this;                                                                                        // 1352\n                                                                                                                    // 1353\n            var promise = new Promise(function (resolve, reject) {                                                  // 1354\n                self.ready().then(function () {                                                                     // 1355\n                    var dbInfo = self._dbInfo;                                                                      // 1356\n                    var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');                         // 1357\n                    var store = transaction.objectStore(dbInfo.storeName);                                          // 1358\n                    var req = store.clear();                                                                        // 1359\n                                                                                                                    // 1360\n                    transaction.oncomplete = function () {                                                          // 1361\n                        resolve();                                                                                  // 1362\n                    };                                                                                              // 1363\n                                                                                                                    // 1364\n                    transaction.onabort = transaction.onerror = function () {                                       // 1365\n                        var err = req.error ? req.error : req.transaction.error;                                    // 1366\n                        reject(err);                                                                                // 1367\n                    };                                                                                              // 1368\n                })['catch'](reject);                                                                                // 1369\n            });                                                                                                     // 1370\n                                                                                                                    // 1371\n            executeCallback(promise, callback);                                                                     // 1372\n            return promise;                                                                                         // 1373\n        }                                                                                                           // 1374\n                                                                                                                    // 1375\n        function length(callback) {                                                                                 // 1376\n            var self = this;                                                                                        // 1377\n                                                                                                                    // 1378\n            var promise = new Promise(function (resolve, reject) {                                                  // 1379\n                self.ready().then(function () {                                                                     // 1380\n                    var dbInfo = self._dbInfo;                                                                      // 1381\n                    var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);  // 1382\n                    var req = store.count();                                                                        // 1383\n                                                                                                                    // 1384\n                    req.onsuccess = function () {                                                                   // 1385\n                        resolve(req.result);                                                                        // 1386\n                    };                                                                                              // 1387\n                                                                                                                    // 1388\n                    req.onerror = function () {                                                                     // 1389\n                        reject(req.error);                                                                          // 1390\n                    };                                                                                              // 1391\n                })['catch'](reject);                                                                                // 1392\n            });                                                                                                     // 1393\n                                                                                                                    // 1394\n            executeCallback(promise, callback);                                                                     // 1395\n            return promise;                                                                                         // 1396\n        }                                                                                                           // 1397\n                                                                                                                    // 1398\n        function key(n, callback) {                                                                                 // 1399\n            var self = this;                                                                                        // 1400\n                                                                                                                    // 1401\n            var promise = new Promise(function (resolve, reject) {                                                  // 1402\n                if (n < 0) {                                                                                        // 1403\n                    resolve(null);                                                                                  // 1404\n                                                                                                                    // 1405\n                    return;                                                                                         // 1406\n                }                                                                                                   // 1407\n                                                                                                                    // 1408\n                self.ready().then(function () {                                                                     // 1409\n                    var dbInfo = self._dbInfo;                                                                      // 1410\n                    var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);  // 1411\n                                                                                                                    // 1412\n                    var advanced = false;                                                                           // 1413\n                    var req = store.openCursor();                                                                   // 1414\n                    req.onsuccess = function () {                                                                   // 1415\n                        var cursor = req.result;                                                                    // 1416\n                        if (!cursor) {                                                                              // 1417\n                            // this means there weren't enough keys                                                 // 1418\n                            resolve(null);                                                                          // 1419\n                                                                                                                    // 1420\n                            return;                                                                                 // 1421\n                        }                                                                                           // 1422\n                                                                                                                    // 1423\n                        if (n === 0) {                                                                              // 1424\n                            // We have the first key, return it if that's what they                                 // 1425\n                            // wanted.                                                                              // 1426\n                            resolve(cursor.key);                                                                    // 1427\n                        } else {                                                                                    // 1428\n                            if (!advanced) {                                                                        // 1429\n                                // Otherwise, ask the cursor to skip ahead n                                        // 1430\n                                // records.                                                                         // 1431\n                                advanced = true;                                                                    // 1432\n                                cursor.advance(n);                                                                  // 1433\n                            } else {                                                                                // 1434\n                                // When we get here, we've got the nth key.                                         // 1435\n                                resolve(cursor.key);                                                                // 1436\n                            }                                                                                       // 1437\n                        }                                                                                           // 1438\n                    };                                                                                              // 1439\n                                                                                                                    // 1440\n                    req.onerror = function () {                                                                     // 1441\n                        reject(req.error);                                                                          // 1442\n                    };                                                                                              // 1443\n                })['catch'](reject);                                                                                // 1444\n            });                                                                                                     // 1445\n                                                                                                                    // 1446\n            executeCallback(promise, callback);                                                                     // 1447\n            return promise;                                                                                         // 1448\n        }                                                                                                           // 1449\n                                                                                                                    // 1450\n        function keys(callback) {                                                                                   // 1451\n            var self = this;                                                                                        // 1452\n                                                                                                                    // 1453\n            var promise = new Promise(function (resolve, reject) {                                                  // 1454\n                self.ready().then(function () {                                                                     // 1455\n                    var dbInfo = self._dbInfo;                                                                      // 1456\n                    var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);  // 1457\n                                                                                                                    // 1458\n                    var req = store.openCursor();                                                                   // 1459\n                    var keys = [];                                                                                  // 1460\n                                                                                                                    // 1461\n                    req.onsuccess = function () {                                                                   // 1462\n                        var cursor = req.result;                                                                    // 1463\n                                                                                                                    // 1464\n                        if (!cursor) {                                                                              // 1465\n                            resolve(keys);                                                                          // 1466\n                            return;                                                                                 // 1467\n                        }                                                                                           // 1468\n                                                                                                                    // 1469\n                        keys.push(cursor.key);                                                                      // 1470\n                        cursor['continue']();                                                                       // 1471\n                    };                                                                                              // 1472\n                                                                                                                    // 1473\n                    req.onerror = function () {                                                                     // 1474\n                        reject(req.error);                                                                          // 1475\n                    };                                                                                              // 1476\n                })['catch'](reject);                                                                                // 1477\n            });                                                                                                     // 1478\n                                                                                                                    // 1479\n            executeCallback(promise, callback);                                                                     // 1480\n            return promise;                                                                                         // 1481\n        }                                                                                                           // 1482\n                                                                                                                    // 1483\n        function executeCallback(promise, callback) {                                                               // 1484\n            if (callback) {                                                                                         // 1485\n                promise.then(function (result) {                                                                    // 1486\n                    callback(null, result);                                                                         // 1487\n                }, function (error) {                                                                               // 1488\n                    callback(error);                                                                                // 1489\n                });                                                                                                 // 1490\n            }                                                                                                       // 1491\n        }                                                                                                           // 1492\n                                                                                                                    // 1493\n        var asyncStorage = {                                                                                        // 1494\n            _driver: 'asyncStorage',                                                                                // 1495\n            _initStorage: _initStorage,                                                                             // 1496\n            iterate: iterate,                                                                                       // 1497\n            getItem: getItem,                                                                                       // 1498\n            setItem: setItem,                                                                                       // 1499\n            removeItem: removeItem,                                                                                 // 1500\n            clear: clear,                                                                                           // 1501\n            length: length,                                                                                         // 1502\n            key: key,                                                                                               // 1503\n            keys: keys                                                                                              // 1504\n        };                                                                                                          // 1505\n                                                                                                                    // 1506\n        module.exports = asyncStorage;                                                                              // 1507\n    }).call(typeof window !== 'undefined' ? window : self);                                                         // 1508\n});                                                                                                                 // 1509\n(function (global, factory) {                                                                                       // 1510\n    if (typeof define === 'function' && define.amd) {                                                               // 1511\n        define('localStorageWrapper', ['exports', 'module'], factory);                                              // 1512\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {                                   // 1513\n        factory(exports, module);                                                                                   // 1514\n    } else {                                                                                                        // 1515\n        var mod = {                                                                                                 // 1516\n            exports: {}                                                                                             // 1517\n        };                                                                                                          // 1518\n        factory(mod.exports, mod);                                                                                  // 1519\n        global.localStorageWrapper = mod.exports;                                                                   // 1520\n    }                                                                                                               // 1521\n})(this, function (exports, module) {                                                                               // 1522\n    'use strict';                                                                                                   // 1523\n                                                                                                                    // 1524\n    var _systemImportTransformerGlobalIdentifier = typeof window !== 'undefined' ? window : self;                   // 1525\n                                                                                                                    // 1526\n    // If IndexedDB isn't available, we'll fall back to localStorage.                                               // 1527\n    // Note that this will have considerable performance and storage                                                // 1528\n    // side-effects (all data will be serialized on save and only data that                                         // 1529\n    // can be converted to a string via `JSON.stringify()` will be saved).                                          // 1530\n    (function () {                                                                                                  // 1531\n        'use strict';                                                                                               // 1532\n                                                                                                                    // 1533\n        var globalObject = this;                                                                                    // 1534\n        var serializer = null;                                                                                      // 1535\n        var localStorage = null;                                                                                    // 1536\n                                                                                                                    // 1537\n        // If the app is running inside a Google Chrome packaged webapp, or some                                    // 1538\n        // other context where localStorage isn't available, we don't use                                           // 1539\n        // localStorage. This feature detection is preferred over the old                                           // 1540\n        // `if (window.chrome && window.chrome.runtime)` code.                                                      // 1541\n        // See: https://github.com/mozilla/localForage/issues/68                                                    // 1542\n        try {                                                                                                       // 1543\n            // If localStorage isn't available, we get outta here!                                                  // 1544\n            // This should be inside a try catch                                                                    // 1545\n            if (!this.localStorage || !('setItem' in this.localStorage)) {                                          // 1546\n                return;                                                                                             // 1547\n            }                                                                                                       // 1548\n            // Initialize localStorage and create a variable to use throughout                                      // 1549\n            // the code.                                                                                            // 1550\n            localStorage = this.localStorage;                                                                       // 1551\n        } catch (e) {                                                                                               // 1552\n            return;                                                                                                 // 1553\n        }                                                                                                           // 1554\n                                                                                                                    // 1555\n        // Config the localStorage backend, using options set in the config.                                        // 1556\n        function _initStorage(options) {                                                                            // 1557\n            var self = this;                                                                                        // 1558\n            var dbInfo = {};                                                                                        // 1559\n            if (options) {                                                                                          // 1560\n                for (var i in options) {                                                                            // 1561\n                    dbInfo[i] = options[i];                                                                         // 1562\n                }                                                                                                   // 1563\n            }                                                                                                       // 1564\n                                                                                                                    // 1565\n            dbInfo.keyPrefix = dbInfo.name + '/';                                                                   // 1566\n                                                                                                                    // 1567\n            self._dbInfo = dbInfo;                                                                                  // 1568\n                                                                                                                    // 1569\n            return new Promise(function (resolve, reject) {                                                         // 1570\n                if (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd) {\n                    _systemImportTransformerGlobalIdentifier.require(['localforageSerializer'], resolve, reject);   // 1572\n                } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') || typeof module !== 'undefined' && (module.component && (_systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component'))) {\n                    resolve(require('./../utils/serializer'));                                                      // 1574\n                } else {                                                                                            // 1575\n                    resolve(_systemImportTransformerGlobalIdentifier['localforageSerializer']);                     // 1576\n                }                                                                                                   // 1577\n            }).then(function (lib) {                                                                                // 1578\n                serializer = lib;                                                                                   // 1579\n                return Promise.resolve();                                                                           // 1580\n            });                                                                                                     // 1581\n        }                                                                                                           // 1582\n                                                                                                                    // 1583\n        // Remove all keys from the datastore, effectively destroying all data in                                   // 1584\n        // the app's key/value store!                                                                               // 1585\n        function clear(callback) {                                                                                  // 1586\n            var self = this;                                                                                        // 1587\n            var promise = self.ready().then(function () {                                                           // 1588\n                var keyPrefix = self._dbInfo.keyPrefix;                                                             // 1589\n                                                                                                                    // 1590\n                for (var i = localStorage.length - 1; i >= 0; i--) {                                                // 1591\n                    var key = localStorage.key(i);                                                                  // 1592\n                                                                                                                    // 1593\n                    if (key.indexOf(keyPrefix) === 0) {                                                             // 1594\n                        localStorage.removeItem(key);                                                               // 1595\n                    }                                                                                               // 1596\n                }                                                                                                   // 1597\n            });                                                                                                     // 1598\n                                                                                                                    // 1599\n            executeCallback(promise, callback);                                                                     // 1600\n            return promise;                                                                                         // 1601\n        }                                                                                                           // 1602\n                                                                                                                    // 1603\n        // Retrieve an item from the store. Unlike the original async_storage                                       // 1604\n        // library in Gaia, we don't modify return values at all. If a key's value                                  // 1605\n        // is `undefined`, we pass that value to the callback function.                                             // 1606\n        function getItem(key, callback) {                                                                           // 1607\n            var self = this;                                                                                        // 1608\n                                                                                                                    // 1609\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1610\n            if (typeof key !== 'string') {                                                                          // 1611\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1612\n                key = String(key);                                                                                  // 1613\n            }                                                                                                       // 1614\n                                                                                                                    // 1615\n            var promise = self.ready().then(function () {                                                           // 1616\n                var dbInfo = self._dbInfo;                                                                          // 1617\n                var result = localStorage.getItem(dbInfo.keyPrefix + key);                                          // 1618\n                                                                                                                    // 1619\n                // If a result was found, parse it from the serialized                                              // 1620\n                // string into a JS object. If result isn't truthy, the key                                         // 1621\n                // is likely undefined and we'll pass it straight to the                                            // 1622\n                // callback.                                                                                        // 1623\n                if (result) {                                                                                       // 1624\n                    result = serializer.deserialize(result);                                                        // 1625\n                }                                                                                                   // 1626\n                                                                                                                    // 1627\n                return result;                                                                                      // 1628\n            });                                                                                                     // 1629\n                                                                                                                    // 1630\n            executeCallback(promise, callback);                                                                     // 1631\n            return promise;                                                                                         // 1632\n        }                                                                                                           // 1633\n                                                                                                                    // 1634\n        // Iterate over all items in the store.                                                                     // 1635\n        function iterate(iterator, callback) {                                                                      // 1636\n            var self = this;                                                                                        // 1637\n                                                                                                                    // 1638\n            var promise = self.ready().then(function () {                                                           // 1639\n                var keyPrefix = self._dbInfo.keyPrefix;                                                             // 1640\n                var keyPrefixLength = keyPrefix.length;                                                             // 1641\n                var length = localStorage.length;                                                                   // 1642\n                                                                                                                    // 1643\n                for (var i = 0; i < length; i++) {                                                                  // 1644\n                    var key = localStorage.key(i);                                                                  // 1645\n                    if (key.indexOf(keyPrefix) !== 0) {                                                             // 1646\n                        continue;                                                                                   // 1647\n                    }                                                                                               // 1648\n                    var value = localStorage.getItem(key);                                                          // 1649\n                                                                                                                    // 1650\n                    // If a result was found, parse it from the serialized                                          // 1651\n                    // string into a JS object. If result isn't truthy, the                                         // 1652\n                    // key is likely undefined and we'll pass it straight                                           // 1653\n                    // to the iterator.                                                                             // 1654\n                    if (value) {                                                                                    // 1655\n                        value = serializer.deserialize(value);                                                      // 1656\n                    }                                                                                               // 1657\n                                                                                                                    // 1658\n                    value = iterator(value, key.substring(keyPrefixLength), i + 1);                                 // 1659\n                                                                                                                    // 1660\n                    if (value !== void 0) {                                                                         // 1661\n                        return value;                                                                               // 1662\n                    }                                                                                               // 1663\n                }                                                                                                   // 1664\n            });                                                                                                     // 1665\n                                                                                                                    // 1666\n            executeCallback(promise, callback);                                                                     // 1667\n            return promise;                                                                                         // 1668\n        }                                                                                                           // 1669\n                                                                                                                    // 1670\n        // Same as localStorage's key() method, except takes a callback.                                            // 1671\n        function key(n, callback) {                                                                                 // 1672\n            var self = this;                                                                                        // 1673\n            var promise = self.ready().then(function () {                                                           // 1674\n                var dbInfo = self._dbInfo;                                                                          // 1675\n                var result;                                                                                         // 1676\n                try {                                                                                               // 1677\n                    result = localStorage.key(n);                                                                   // 1678\n                } catch (error) {                                                                                   // 1679\n                    result = null;                                                                                  // 1680\n                }                                                                                                   // 1681\n                                                                                                                    // 1682\n                // Remove the prefix from the key, if a key is found.                                               // 1683\n                if (result) {                                                                                       // 1684\n                    result = result.substring(dbInfo.keyPrefix.length);                                             // 1685\n                }                                                                                                   // 1686\n                                                                                                                    // 1687\n                return result;                                                                                      // 1688\n            });                                                                                                     // 1689\n                                                                                                                    // 1690\n            executeCallback(promise, callback);                                                                     // 1691\n            return promise;                                                                                         // 1692\n        }                                                                                                           // 1693\n                                                                                                                    // 1694\n        function keys(callback) {                                                                                   // 1695\n            var self = this;                                                                                        // 1696\n            var promise = self.ready().then(function () {                                                           // 1697\n                var dbInfo = self._dbInfo;                                                                          // 1698\n                var length = localStorage.length;                                                                   // 1699\n                var keys = [];                                                                                      // 1700\n                                                                                                                    // 1701\n                for (var i = 0; i < length; i++) {                                                                  // 1702\n                    if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {                                      // 1703\n                        keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));                          // 1704\n                    }                                                                                               // 1705\n                }                                                                                                   // 1706\n                                                                                                                    // 1707\n                return keys;                                                                                        // 1708\n            });                                                                                                     // 1709\n                                                                                                                    // 1710\n            executeCallback(promise, callback);                                                                     // 1711\n            return promise;                                                                                         // 1712\n        }                                                                                                           // 1713\n                                                                                                                    // 1714\n        // Supply the number of keys in the datastore to the callback function.                                     // 1715\n        function length(callback) {                                                                                 // 1716\n            var self = this;                                                                                        // 1717\n            var promise = self.keys().then(function (keys) {                                                        // 1718\n                return keys.length;                                                                                 // 1719\n            });                                                                                                     // 1720\n                                                                                                                    // 1721\n            executeCallback(promise, callback);                                                                     // 1722\n            return promise;                                                                                         // 1723\n        }                                                                                                           // 1724\n                                                                                                                    // 1725\n        // Remove an item from the store, nice and simple.                                                          // 1726\n        function removeItem(key, callback) {                                                                        // 1727\n            var self = this;                                                                                        // 1728\n                                                                                                                    // 1729\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1730\n            if (typeof key !== 'string') {                                                                          // 1731\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1732\n                key = String(key);                                                                                  // 1733\n            }                                                                                                       // 1734\n                                                                                                                    // 1735\n            var promise = self.ready().then(function () {                                                           // 1736\n                var dbInfo = self._dbInfo;                                                                          // 1737\n                localStorage.removeItem(dbInfo.keyPrefix + key);                                                    // 1738\n            });                                                                                                     // 1739\n                                                                                                                    // 1740\n            executeCallback(promise, callback);                                                                     // 1741\n            return promise;                                                                                         // 1742\n        }                                                                                                           // 1743\n                                                                                                                    // 1744\n        // Set a key's value and run an optional callback once the value is set.                                    // 1745\n        // Unlike Gaia's implementation, the callback function is passed the value,                                 // 1746\n        // in case you want to operate on that value only after you're sure it                                      // 1747\n        // saved, or something like that.                                                                           // 1748\n        function setItem(key, value, callback) {                                                                    // 1749\n            var self = this;                                                                                        // 1750\n                                                                                                                    // 1751\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1752\n            if (typeof key !== 'string') {                                                                          // 1753\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1754\n                key = String(key);                                                                                  // 1755\n            }                                                                                                       // 1756\n                                                                                                                    // 1757\n            var promise = self.ready().then(function () {                                                           // 1758\n                // Convert undefined values to null.                                                                // 1759\n                // https://github.com/mozilla/localForage/pull/42                                                   // 1760\n                if (value === undefined) {                                                                          // 1761\n                    value = null;                                                                                   // 1762\n                }                                                                                                   // 1763\n                                                                                                                    // 1764\n                // Save the original value to pass to the callback.                                                 // 1765\n                var originalValue = value;                                                                          // 1766\n                                                                                                                    // 1767\n                return new Promise(function (resolve, reject) {                                                     // 1768\n                    serializer.serialize(value, function (value, error) {                                           // 1769\n                        if (error) {                                                                                // 1770\n                            reject(error);                                                                          // 1771\n                        } else {                                                                                    // 1772\n                            try {                                                                                   // 1773\n                                var dbInfo = self._dbInfo;                                                          // 1774\n                                localStorage.setItem(dbInfo.keyPrefix + key, value);                                // 1775\n                                resolve(originalValue);                                                             // 1776\n                            } catch (e) {                                                                           // 1777\n                                // localStorage capacity exceeded.                                                  // 1778\n                                // TODO: Make this a specific error/event.                                          // 1779\n                                if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {   // 1780\n                                    reject(e);                                                                      // 1781\n                                }                                                                                   // 1782\n                                reject(e);                                                                          // 1783\n                            }                                                                                       // 1784\n                        }                                                                                           // 1785\n                    });                                                                                             // 1786\n                });                                                                                                 // 1787\n            });                                                                                                     // 1788\n                                                                                                                    // 1789\n            executeCallback(promise, callback);                                                                     // 1790\n            return promise;                                                                                         // 1791\n        }                                                                                                           // 1792\n                                                                                                                    // 1793\n        function executeCallback(promise, callback) {                                                               // 1794\n            if (callback) {                                                                                         // 1795\n                promise.then(function (result) {                                                                    // 1796\n                    callback(null, result);                                                                         // 1797\n                }, function (error) {                                                                               // 1798\n                    callback(error);                                                                                // 1799\n                });                                                                                                 // 1800\n            }                                                                                                       // 1801\n        }                                                                                                           // 1802\n                                                                                                                    // 1803\n        var localStorageWrapper = {                                                                                 // 1804\n            _driver: 'localStorageWrapper',                                                                         // 1805\n            _initStorage: _initStorage,                                                                             // 1806\n            // Default API, from Gaia/localStorage.                                                                 // 1807\n            iterate: iterate,                                                                                       // 1808\n            getItem: getItem,                                                                                       // 1809\n            setItem: setItem,                                                                                       // 1810\n            removeItem: removeItem,                                                                                 // 1811\n            clear: clear,                                                                                           // 1812\n            length: length,                                                                                         // 1813\n            key: key,                                                                                               // 1814\n            keys: keys                                                                                              // 1815\n        };                                                                                                          // 1816\n                                                                                                                    // 1817\n        module.exports = localStorageWrapper;                                                                       // 1818\n    }).call(typeof window !== 'undefined' ? window : self);                                                         // 1819\n});                                                                                                                 // 1820\n(function (global, factory) {                                                                                       // 1821\n    if (typeof define === 'function' && define.amd) {                                                               // 1822\n        define('webSQLStorage', ['exports', 'module'], factory);                                                    // 1823\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {                                   // 1824\n        factory(exports, module);                                                                                   // 1825\n    } else {                                                                                                        // 1826\n        var mod = {                                                                                                 // 1827\n            exports: {}                                                                                             // 1828\n        };                                                                                                          // 1829\n        factory(mod.exports, mod);                                                                                  // 1830\n        global.webSQLStorage = mod.exports;                                                                         // 1831\n    }                                                                                                               // 1832\n})(this, function (exports, module) {                                                                               // 1833\n    'use strict';                                                                                                   // 1834\n                                                                                                                    // 1835\n    var _systemImportTransformerGlobalIdentifier = typeof window !== 'undefined' ? window : self;                   // 1836\n                                                                                                                    // 1837\n    /*                                                                                                              // 1838\n     * Includes code from:                                                                                          // 1839\n     *                                                                                                              // 1840\n     * base64-arraybuffer                                                                                           // 1841\n     * https://github.com/niklasvh/base64-arraybuffer                                                               // 1842\n     *                                                                                                              // 1843\n     * Copyright (c) 2012 Niklas von Hertzen                                                                        // 1844\n     * Licensed under the MIT license.                                                                              // 1845\n     */                                                                                                             // 1846\n    (function () {                                                                                                  // 1847\n        'use strict';                                                                                               // 1848\n                                                                                                                    // 1849\n        var globalObject = this;                                                                                    // 1850\n        var serializer = null;                                                                                      // 1851\n        var openDatabase = this.openDatabase;                                                                       // 1852\n                                                                                                                    // 1853\n        // If WebSQL methods aren't available, we can stop now.                                                     // 1854\n        if (!openDatabase) {                                                                                        // 1855\n            return;                                                                                                 // 1856\n        }                                                                                                           // 1857\n                                                                                                                    // 1858\n        // Open the WebSQL database (automatically creates one if one didn't                                        // 1859\n        // previously exist), using any options set in the config.                                                  // 1860\n        function _initStorage(options) {                                                                            // 1861\n            var self = this;                                                                                        // 1862\n            var dbInfo = {                                                                                          // 1863\n                db: null                                                                                            // 1864\n            };                                                                                                      // 1865\n                                                                                                                    // 1866\n            if (options) {                                                                                          // 1867\n                for (var i in options) {                                                                            // 1868\n                    dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];                // 1869\n                }                                                                                                   // 1870\n            }                                                                                                       // 1871\n                                                                                                                    // 1872\n            var dbInfoPromise = new Promise(function (resolve, reject) {                                            // 1873\n                // Open the database; the openDatabase API will automatically                                       // 1874\n                // create it for us if it doesn't exist.                                                            // 1875\n                try {                                                                                               // 1876\n                    dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n                } catch (e) {                                                                                       // 1878\n                    return self.setDriver(self.LOCALSTORAGE).then(function () {                                     // 1879\n                        return self._initStorage(options);                                                          // 1880\n                    }).then(resolve)['catch'](reject);                                                              // 1881\n                }                                                                                                   // 1882\n                                                                                                                    // 1883\n                // Create our key/value table if it doesn't exist.                                                  // 1884\n                dbInfo.db.transaction(function (t) {                                                                // 1885\n                    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                        self._dbInfo = dbInfo;                                                                      // 1887\n                        resolve();                                                                                  // 1888\n                    }, function (t, error) {                                                                        // 1889\n                        reject(error);                                                                              // 1890\n                    });                                                                                             // 1891\n                });                                                                                                 // 1892\n            });                                                                                                     // 1893\n                                                                                                                    // 1894\n            return new Promise(function (resolve, reject) {                                                         // 1895\n                if (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd) {\n                    _systemImportTransformerGlobalIdentifier.require(['localforageSerializer'], resolve, reject);   // 1897\n                } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') || typeof module !== 'undefined' && (module.component && (_systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component'))) {\n                    resolve(require('./../utils/serializer'));                                                      // 1899\n                } else {                                                                                            // 1900\n                    resolve(_systemImportTransformerGlobalIdentifier['localforageSerializer']);                     // 1901\n                }                                                                                                   // 1902\n            }).then(function (lib) {                                                                                // 1903\n                serializer = lib;                                                                                   // 1904\n                return dbInfoPromise;                                                                               // 1905\n            });                                                                                                     // 1906\n        }                                                                                                           // 1907\n                                                                                                                    // 1908\n        function getItem(key, callback) {                                                                           // 1909\n            var self = this;                                                                                        // 1910\n                                                                                                                    // 1911\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1912\n            if (typeof key !== 'string') {                                                                          // 1913\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1914\n                key = String(key);                                                                                  // 1915\n            }                                                                                                       // 1916\n                                                                                                                    // 1917\n            var promise = new Promise(function (resolve, reject) {                                                  // 1918\n                self.ready().then(function () {                                                                     // 1919\n                    var dbInfo = self._dbInfo;                                                                      // 1920\n                    dbInfo.db.transaction(function (t) {                                                            // 1921\n                        t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                            var result = results.rows.length ? results.rows.item(0).value : null;                   // 1923\n                                                                                                                    // 1924\n                            // Check to see if this is serialized content we need to                                // 1925\n                            // unpack.                                                                              // 1926\n                            if (result) {                                                                           // 1927\n                                result = serializer.deserialize(result);                                            // 1928\n                            }                                                                                       // 1929\n                                                                                                                    // 1930\n                            resolve(result);                                                                        // 1931\n                        }, function (t, error) {                                                                    // 1932\n                                                                                                                    // 1933\n                            reject(error);                                                                          // 1934\n                        });                                                                                         // 1935\n                    });                                                                                             // 1936\n                })['catch'](reject);                                                                                // 1937\n            });                                                                                                     // 1938\n                                                                                                                    // 1939\n            executeCallback(promise, callback);                                                                     // 1940\n            return promise;                                                                                         // 1941\n        }                                                                                                           // 1942\n                                                                                                                    // 1943\n        function iterate(iterator, callback) {                                                                      // 1944\n            var self = this;                                                                                        // 1945\n                                                                                                                    // 1946\n            var promise = new Promise(function (resolve, reject) {                                                  // 1947\n                self.ready().then(function () {                                                                     // 1948\n                    var dbInfo = self._dbInfo;                                                                      // 1949\n                                                                                                                    // 1950\n                    dbInfo.db.transaction(function (t) {                                                            // 1951\n                        t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {               // 1952\n                            var rows = results.rows;                                                                // 1953\n                            var length = rows.length;                                                               // 1954\n                                                                                                                    // 1955\n                            for (var i = 0; i < length; i++) {                                                      // 1956\n                                var item = rows.item(i);                                                            // 1957\n                                var result = item.value;                                                            // 1958\n                                                                                                                    // 1959\n                                // Check to see if this is serialized content                                       // 1960\n                                // we need to unpack.                                                               // 1961\n                                if (result) {                                                                       // 1962\n                                    result = serializer.deserialize(result);                                        // 1963\n                                }                                                                                   // 1964\n                                                                                                                    // 1965\n                                result = iterator(result, item.key, i + 1);                                         // 1966\n                                                                                                                    // 1967\n                                // void(0) prevents problems with redefinition                                      // 1968\n                                // of `undefined`.                                                                  // 1969\n                                if (result !== void 0) {                                                            // 1970\n                                    resolve(result);                                                                // 1971\n                                    return;                                                                         // 1972\n                                }                                                                                   // 1973\n                            }                                                                                       // 1974\n                                                                                                                    // 1975\n                            resolve();                                                                              // 1976\n                        }, function (t, error) {                                                                    // 1977\n                            reject(error);                                                                          // 1978\n                        });                                                                                         // 1979\n                    });                                                                                             // 1980\n                })['catch'](reject);                                                                                // 1981\n            });                                                                                                     // 1982\n                                                                                                                    // 1983\n            executeCallback(promise, callback);                                                                     // 1984\n            return promise;                                                                                         // 1985\n        }                                                                                                           // 1986\n                                                                                                                    // 1987\n        function setItem(key, value, callback) {                                                                    // 1988\n            var self = this;                                                                                        // 1989\n                                                                                                                    // 1990\n            // Cast the key to a string, as that's all we can set as a key.                                         // 1991\n            if (typeof key !== 'string') {                                                                          // 1992\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 1993\n                key = String(key);                                                                                  // 1994\n            }                                                                                                       // 1995\n                                                                                                                    // 1996\n            var promise = new Promise(function (resolve, reject) {                                                  // 1997\n                self.ready().then(function () {                                                                     // 1998\n                    // The localStorage API doesn't return undefined values in an                                   // 1999\n                    // \"expected\" way, so undefined is always cast to null in all                                   // 2000\n                    // drivers. See: https://github.com/mozilla/localForage/pull/42                                 // 2001\n                    if (value === undefined) {                                                                      // 2002\n                        value = null;                                                                               // 2003\n                    }                                                                                               // 2004\n                                                                                                                    // 2005\n                    // Save the original value to pass to the callback.                                             // 2006\n                    var originalValue = value;                                                                      // 2007\n                                                                                                                    // 2008\n                    serializer.serialize(value, function (value, error) {                                           // 2009\n                        if (error) {                                                                                // 2010\n                            reject(error);                                                                          // 2011\n                        } else {                                                                                    // 2012\n                            var dbInfo = self._dbInfo;                                                              // 2013\n                            dbInfo.db.transaction(function (t) {                                                    // 2014\n                                t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n                                    resolve(originalValue);                                                         // 2016\n                                }, function (t, error) {                                                            // 2017\n                                    reject(error);                                                                  // 2018\n                                });                                                                                 // 2019\n                            }, function (sqlError) {                                                                // 2020\n                                // The transaction failed; check                                                    // 2021\n                                // to see if it's a quota error.                                                    // 2022\n                                if (sqlError.code === sqlError.QUOTA_ERR) {                                         // 2023\n                                    // We reject the callback outright for now, but                                 // 2024\n                                    // it's worth trying to re-run the transaction.                                 // 2025\n                                    // Even if the user accepts the prompt to use                                   // 2026\n                                    // more storage on Safari, this error will                                      // 2027\n                                    // be called.                                                                   // 2028\n                                    //                                                                              // 2029\n                                    // TODO: Try to re-run the transaction.                                         // 2030\n                                    reject(sqlError);                                                               // 2031\n                                }                                                                                   // 2032\n                            });                                                                                     // 2033\n                        }                                                                                           // 2034\n                    });                                                                                             // 2035\n                })['catch'](reject);                                                                                // 2036\n            });                                                                                                     // 2037\n                                                                                                                    // 2038\n            executeCallback(promise, callback);                                                                     // 2039\n            return promise;                                                                                         // 2040\n        }                                                                                                           // 2041\n                                                                                                                    // 2042\n        function removeItem(key, callback) {                                                                        // 2043\n            var self = this;                                                                                        // 2044\n                                                                                                                    // 2045\n            // Cast the key to a string, as that's all we can set as a key.                                         // 2046\n            if (typeof key !== 'string') {                                                                          // 2047\n                globalObject.console.warn(key + ' used as a key, but it is not a string.');                         // 2048\n                key = String(key);                                                                                  // 2049\n            }                                                                                                       // 2050\n                                                                                                                    // 2051\n            var promise = new Promise(function (resolve, reject) {                                                  // 2052\n                self.ready().then(function () {                                                                     // 2053\n                    var dbInfo = self._dbInfo;                                                                      // 2054\n                    dbInfo.db.transaction(function (t) {                                                            // 2055\n                        t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {     // 2056\n                            resolve();                                                                              // 2057\n                        }, function (t, error) {                                                                    // 2058\n                                                                                                                    // 2059\n                            reject(error);                                                                          // 2060\n                        });                                                                                         // 2061\n                    });                                                                                             // 2062\n                })['catch'](reject);                                                                                // 2063\n            });                                                                                                     // 2064\n                                                                                                                    // 2065\n            executeCallback(promise, callback);                                                                     // 2066\n            return promise;                                                                                         // 2067\n        }                                                                                                           // 2068\n                                                                                                                    // 2069\n        // Deletes every item in the table.                                                                         // 2070\n        // TODO: Find out if this resets the AUTO_INCREMENT number.                                                 // 2071\n        function clear(callback) {                                                                                  // 2072\n            var self = this;                                                                                        // 2073\n                                                                                                                    // 2074\n            var promise = new Promise(function (resolve, reject) {                                                  // 2075\n                self.ready().then(function () {                                                                     // 2076\n                    var dbInfo = self._dbInfo;                                                                      // 2077\n                    dbInfo.db.transaction(function (t) {                                                            // 2078\n                        t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {                           // 2079\n                            resolve();                                                                              // 2080\n                        }, function (t, error) {                                                                    // 2081\n                            reject(error);                                                                          // 2082\n                        });                                                                                         // 2083\n                    });                                                                                             // 2084\n                })['catch'](reject);                                                                                // 2085\n            });                                                                                                     // 2086\n                                                                                                                    // 2087\n            executeCallback(promise, callback);                                                                     // 2088\n            return promise;                                                                                         // 2089\n        }                                                                                                           // 2090\n                                                                                                                    // 2091\n        // Does a simple `COUNT(key)` to get the number of items stored in                                          // 2092\n        // localForage.                                                                                             // 2093\n        function length(callback) {                                                                                 // 2094\n            var self = this;                                                                                        // 2095\n                                                                                                                    // 2096\n            var promise = new Promise(function (resolve, reject) {                                                  // 2097\n                self.ready().then(function () {                                                                     // 2098\n                    var dbInfo = self._dbInfo;                                                                      // 2099\n                    dbInfo.db.transaction(function (t) {                                                            // 2100\n                        // Ahhh, SQL makes this one soooooo easy.                                                   // 2101\n                        t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                            var result = results.rows.item(0).c;                                                    // 2103\n                                                                                                                    // 2104\n                            resolve(result);                                                                        // 2105\n                        }, function (t, error) {                                                                    // 2106\n                                                                                                                    // 2107\n                            reject(error);                                                                          // 2108\n                        });                                                                                         // 2109\n                    });                                                                                             // 2110\n                })['catch'](reject);                                                                                // 2111\n            });                                                                                                     // 2112\n                                                                                                                    // 2113\n            executeCallback(promise, callback);                                                                     // 2114\n            return promise;                                                                                         // 2115\n        }                                                                                                           // 2116\n                                                                                                                    // 2117\n        // Return the key located at key index X; essentially gets the key from a                                   // 2118\n        // `WHERE id = ?`. This is the most efficient way I can think to implement                                  // 2119\n        // this rarely-used (in my experience) part of the API, but it can seem                                     // 2120\n        // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so                                  // 2121\n        // the ID of each key will change every time it's updated. Perhaps a stored                                 // 2122\n        // procedure for the `setItem()` SQL would solve this problem?                                              // 2123\n        // TODO: Don't change ID on `setItem()`.                                                                    // 2124\n        function key(n, callback) {                                                                                 // 2125\n            var self = this;                                                                                        // 2126\n                                                                                                                    // 2127\n            var promise = new Promise(function (resolve, reject) {                                                  // 2128\n                self.ready().then(function () {                                                                     // 2129\n                    var dbInfo = self._dbInfo;                                                                      // 2130\n                    dbInfo.db.transaction(function (t) {                                                            // 2131\n                        t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                            var result = results.rows.length ? results.rows.item(0).key : null;                     // 2133\n                            resolve(result);                                                                        // 2134\n                        }, function (t, error) {                                                                    // 2135\n                            reject(error);                                                                          // 2136\n                        });                                                                                         // 2137\n                    });                                                                                             // 2138\n                })['catch'](reject);                                                                                // 2139\n            });                                                                                                     // 2140\n                                                                                                                    // 2141\n            executeCallback(promise, callback);                                                                     // 2142\n            return promise;                                                                                         // 2143\n        }                                                                                                           // 2144\n                                                                                                                    // 2145\n        function keys(callback) {                                                                                   // 2146\n            var self = this;                                                                                        // 2147\n                                                                                                                    // 2148\n            var promise = new Promise(function (resolve, reject) {                                                  // 2149\n                self.ready().then(function () {                                                                     // 2150\n                    var dbInfo = self._dbInfo;                                                                      // 2151\n                    dbInfo.db.transaction(function (t) {                                                            // 2152\n                        t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {             // 2153\n                            var keys = [];                                                                          // 2154\n                                                                                                                    // 2155\n                            for (var i = 0; i < results.rows.length; i++) {                                         // 2156\n                                keys.push(results.rows.item(i).key);                                                // 2157\n                            }                                                                                       // 2158\n                                                                                                                    // 2159\n                            resolve(keys);                                                                          // 2160\n                        }, function (t, error) {                                                                    // 2161\n                                                                                                                    // 2162\n                            reject(error);                                                                          // 2163\n                        });                                                                                         // 2164\n                    });                                                                                             // 2165\n                })['catch'](reject);                                                                                // 2166\n            });                                                                                                     // 2167\n                                                                                                                    // 2168\n            executeCallback(promise, callback);                                                                     // 2169\n            return promise;                                                                                         // 2170\n        }                                                                                                           // 2171\n                                                                                                                    // 2172\n        function executeCallback(promise, callback) {                                                               // 2173\n            if (callback) {                                                                                         // 2174\n                promise.then(function (result) {                                                                    // 2175\n                    callback(null, result);                                                                         // 2176\n                }, function (error) {                                                                               // 2177\n                    callback(error);                                                                                // 2178\n                });                                                                                                 // 2179\n            }                                                                                                       // 2180\n        }                                                                                                           // 2181\n                                                                                                                    // 2182\n        var webSQLStorage = {                                                                                       // 2183\n            _driver: 'webSQLStorage',                                                                               // 2184\n            _initStorage: _initStorage,                                                                             // 2185\n            iterate: iterate,                                                                                       // 2186\n            getItem: getItem,                                                                                       // 2187\n            setItem: setItem,                                                                                       // 2188\n            removeItem: removeItem,                                                                                 // 2189\n            clear: clear,                                                                                           // 2190\n            length: length,                                                                                         // 2191\n            key: key,                                                                                               // 2192\n            keys: keys                                                                                              // 2193\n        };                                                                                                          // 2194\n                                                                                                                    // 2195\n        module.exports = webSQLStorage;                                                                             // 2196\n    }).call(typeof window !== 'undefined' ? window : self);                                                         // 2197\n});                                                                                                                 // 2198\n(function (global, factory) {                                                                                       // 2199\n    if (typeof define === 'function' && define.amd) {                                                               // 2200\n        define('localforage', ['exports', 'module'], factory);                                                      // 2201\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {                                   // 2202\n        factory(exports, module);                                                                                   // 2203\n    } else {                                                                                                        // 2204\n        var mod = {                                                                                                 // 2205\n            exports: {}                                                                                             // 2206\n        };                                                                                                          // 2207\n        factory(mod.exports, mod);                                                                                  // 2208\n        global.localforage = mod.exports;                                                                           // 2209\n    }                                                                                                               // 2210\n})(this, function (exports, module) {                                                                               // 2211\n    'use strict';                                                                                                   // 2212\n                                                                                                                    // 2213\n    var _systemImportTransformerGlobalIdentifier = typeof window !== 'undefined' ? window : self;                   // 2214\n                                                                                                                    // 2215\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n                                                                                                                    // 2217\n    (function () {                                                                                                  // 2218\n        'use strict';                                                                                               // 2219\n                                                                                                                    // 2220\n        // Custom drivers are stored here when `defineDriver()` is called.                                          // 2221\n        // They are shared across all instances of localForage.                                                     // 2222\n        var CustomDrivers = {};                                                                                     // 2223\n                                                                                                                    // 2224\n        var DriverType = {                                                                                          // 2225\n            INDEXEDDB: 'asyncStorage',                                                                              // 2226\n            LOCALSTORAGE: 'localStorageWrapper',                                                                    // 2227\n            WEBSQL: 'webSQLStorage'                                                                                 // 2228\n        };                                                                                                          // 2229\n                                                                                                                    // 2230\n        var DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];                // 2231\n                                                                                                                    // 2232\n        var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];     // 2233\n                                                                                                                    // 2234\n        var DefaultConfig = {                                                                                       // 2235\n            description: '',                                                                                        // 2236\n            driver: DefaultDriverOrder.slice(),                                                                     // 2237\n            name: 'localforage',                                                                                    // 2238\n            // Default DB size is _JUST UNDER_ 5MB, as it's the highest size                                        // 2239\n            // we can use without a prompt.                                                                         // 2240\n            size: 4980736,                                                                                          // 2241\n            storeName: 'keyvaluepairs',                                                                             // 2242\n            version: 1.0                                                                                            // 2243\n        };                                                                                                          // 2244\n                                                                                                                    // 2245\n        // Check to see if IndexedDB is available and if it is the latest                                           // 2246\n        // implementation; it's our preferred backend library. We use \"_spec_test\"                                  // 2247\n        // as the name of the database because it's not the one we'll operate on,                                   // 2248\n        // but it's useful to make sure its using the right spec.                                                   // 2249\n        // See: https://github.com/mozilla/localForage/issues/128                                                   // 2250\n        var driverSupport = (function (self) {                                                                      // 2251\n            // Initialize IndexedDB; fall back to vendor-prefixed versions                                          // 2252\n            // if needed.                                                                                           // 2253\n            var indexedDB = indexedDB || self.indexedDB || self.webkitIndexedDB || self.mozIndexedDB || self.OIndexedDB || self.msIndexedDB;\n                                                                                                                    // 2255\n            var result = {};                                                                                        // 2256\n                                                                                                                    // 2257\n            result[DriverType.WEBSQL] = !!self.openDatabase;                                                        // 2258\n            result[DriverType.INDEXEDDB] = !!(function () {                                                         // 2259\n                // We mimic PouchDB here; just UA test for Safari (which, as of                                     // 2260\n                // iOS 8/Yosemite, doesn't properly support IndexedDB).                                             // 2261\n                // IndexedDB support is broken and different from Blink's.                                          // 2262\n                // This is faster than the test case (and it's sync), so we just                                    // 2263\n                // do this. *SIGH*                                                                                  // 2264\n                // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/                                         // 2265\n                //                                                                                                  // 2266\n                // We test for openDatabase because IE Mobile identifies itself                                     // 2267\n                // as Safari. Oh the lulz...                                                                        // 2268\n                if (typeof self.openDatabase !== 'undefined' && self.navigator && self.navigator.userAgent && /Safari/.test(self.navigator.userAgent) && !/Chrome/.test(self.navigator.userAgent)) {\n                    return false;                                                                                   // 2270\n                }                                                                                                   // 2271\n                try {                                                                                               // 2272\n                    return indexedDB && typeof indexedDB.open === 'function' &&                                     // 2273\n                    // Some Samsung/HTC Android 4.0-4.3 devices                                                     // 2274\n                    // have older IndexedDB specs; if this isn't available                                          // 2275\n                    // their IndexedDB is too old for us to use.                                                    // 2276\n                    // (Replaces the onupgradeneeded test.)                                                         // 2277\n                    typeof self.IDBKeyRange !== 'undefined';                                                        // 2278\n                } catch (e) {                                                                                       // 2279\n                    return false;                                                                                   // 2280\n                }                                                                                                   // 2281\n            })();                                                                                                   // 2282\n                                                                                                                    // 2283\n            result[DriverType.LOCALSTORAGE] = !!(function () {                                                      // 2284\n                try {                                                                                               // 2285\n                    return self.localStorage && 'setItem' in self.localStorage && self.localStorage.setItem;        // 2286\n                } catch (e) {                                                                                       // 2287\n                    return false;                                                                                   // 2288\n                }                                                                                                   // 2289\n            })();                                                                                                   // 2290\n                                                                                                                    // 2291\n            return result;                                                                                          // 2292\n        })(this);                                                                                                   // 2293\n                                                                                                                    // 2294\n        var isArray = Array.isArray || function (arg) {                                                             // 2295\n            return Object.prototype.toString.call(arg) === '[object Array]';                                        // 2296\n        };                                                                                                          // 2297\n                                                                                                                    // 2298\n        function callWhenReady(localForageInstance, libraryMethod) {                                                // 2299\n            localForageInstance[libraryMethod] = function () {                                                      // 2300\n                var _args = arguments;                                                                              // 2301\n                return localForageInstance.ready().then(function () {                                               // 2302\n                    return localForageInstance[libraryMethod].apply(localForageInstance, _args);                    // 2303\n                });                                                                                                 // 2304\n            };                                                                                                      // 2305\n        }                                                                                                           // 2306\n                                                                                                                    // 2307\n        function extend() {                                                                                         // 2308\n            for (var i = 1; i < arguments.length; i++) {                                                            // 2309\n                var arg = arguments[i];                                                                             // 2310\n                                                                                                                    // 2311\n                if (arg) {                                                                                          // 2312\n                    for (var key in arg) {                                                                          // 2313\n                        if (arg.hasOwnProperty(key)) {                                                              // 2314\n                            if (isArray(arg[key])) {                                                                // 2315\n                                arguments[0][key] = arg[key].slice();                                               // 2316\n                            } else {                                                                                // 2317\n                                arguments[0][key] = arg[key];                                                       // 2318\n                            }                                                                                       // 2319\n                        }                                                                                           // 2320\n                    }                                                                                               // 2321\n                }                                                                                                   // 2322\n            }                                                                                                       // 2323\n                                                                                                                    // 2324\n            return arguments[0];                                                                                    // 2325\n        }                                                                                                           // 2326\n                                                                                                                    // 2327\n        function isLibraryDriver(driverName) {                                                                      // 2328\n            for (var driver in DriverType) {                                                                        // 2329\n                if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {                       // 2330\n                    return true;                                                                                    // 2331\n                }                                                                                                   // 2332\n            }                                                                                                       // 2333\n                                                                                                                    // 2334\n            return false;                                                                                           // 2335\n        }                                                                                                           // 2336\n                                                                                                                    // 2337\n        var LocalForage = (function () {                                                                            // 2338\n            function LocalForage(options) {                                                                         // 2339\n                _classCallCheck(this, LocalForage);                                                                 // 2340\n                                                                                                                    // 2341\n                this.INDEXEDDB = DriverType.INDEXEDDB;                                                              // 2342\n                this.LOCALSTORAGE = DriverType.LOCALSTORAGE;                                                        // 2343\n                this.WEBSQL = DriverType.WEBSQL;                                                                    // 2344\n                                                                                                                    // 2345\n                this._config = extend({}, DefaultConfig, options);                                                  // 2346\n                this._driverSet = null;                                                                             // 2347\n                this._ready = false;                                                                                // 2348\n                this._dbInfo = null;                                                                                // 2349\n                                                                                                                    // 2350\n                // Add a stub for each driver API method that delays the call to the                                // 2351\n                // corresponding driver method until localForage is ready. These stubs                              // 2352\n                // will be replaced by the driver methods as soon as the driver is                                  // 2353\n                // loaded, so there is no performance impact.                                                       // 2354\n                for (var i = 0; i < LibraryMethods.length; i++) {                                                   // 2355\n                    callWhenReady(this, LibraryMethods[i]);                                                         // 2356\n                }                                                                                                   // 2357\n                                                                                                                    // 2358\n                this.setDriver(this._config.driver);                                                                // 2359\n            }                                                                                                       // 2360\n                                                                                                                    // 2361\n            // The actual localForage object that we expose as a module or via a                                    // 2362\n            // global. It's extended by pulling in one of our other libraries.                                      // 2363\n                                                                                                                    // 2364\n            // Set any config values for localForage; can be called anytime before                                  // 2365\n            // the first API call (e.g. `getItem`, `setItem`).                                                      // 2366\n            // We loop through options so we don't overwrite existing config                                        // 2367\n            // values.                                                                                              // 2368\n                                                                                                                    // 2369\n            LocalForage.prototype.config = function config(options) {                                               // 2370\n                // If the options argument is an object, we use it to set values.                                   // 2371\n                // Otherwise, we return either a specified config value or all                                      // 2372\n                // config values.                                                                                   // 2373\n                if (typeof options === 'object') {                                                                  // 2374\n                    // If localforage is ready and fully initialized, we can't set                                  // 2375\n                    // any new configuration values. Instead, we return an error.                                   // 2376\n                    if (this._ready) {                                                                              // 2377\n                        return new Error(\"Can't call config() after localforage \" + 'has been used.');              // 2378\n                    }                                                                                               // 2379\n                                                                                                                    // 2380\n                    for (var i in options) {                                                                        // 2381\n                        if (i === 'storeName') {                                                                    // 2382\n                            options[i] = options[i].replace(/\\W/g, '_');                                            // 2383\n                        }                                                                                           // 2384\n                                                                                                                    // 2385\n                        this._config[i] = options[i];                                                               // 2386\n                    }                                                                                               // 2387\n                                                                                                                    // 2388\n                    // after all config options are set and                                                         // 2389\n                    // the driver option is used, try setting it                                                    // 2390\n                    if ('driver' in options && options.driver) {                                                    // 2391\n                        this.setDriver(this._config.driver);                                                        // 2392\n                    }                                                                                               // 2393\n                                                                                                                    // 2394\n                    return true;                                                                                    // 2395\n                } else if (typeof options === 'string') {                                                           // 2396\n                    return this._config[options];                                                                   // 2397\n                } else {                                                                                            // 2398\n                    return this._config;                                                                            // 2399\n                }                                                                                                   // 2400\n            };                                                                                                      // 2401\n                                                                                                                    // 2402\n            // Used to define a custom driver, shared across all instances of                                       // 2403\n            // localForage.                                                                                         // 2404\n                                                                                                                    // 2405\n            LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {     // 2406\n                var promise = new Promise(function (resolve, reject) {                                              // 2407\n                    try {                                                                                           // 2408\n                        var driverName = driverObject._driver;                                                      // 2409\n                        var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n                        var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);  // 2411\n                                                                                                                    // 2412\n                        // A driver name should be defined and not overlap with the                                 // 2413\n                        // library-defined, default drivers.                                                        // 2414\n                        if (!driverObject._driver) {                                                                // 2415\n                            reject(complianceError);                                                                // 2416\n                            return;                                                                                 // 2417\n                        }                                                                                           // 2418\n                        if (isLibraryDriver(driverObject._driver)) {                                                // 2419\n                            reject(namingError);                                                                    // 2420\n                            return;                                                                                 // 2421\n                        }                                                                                           // 2422\n                                                                                                                    // 2423\n                        var customDriverMethods = LibraryMethods.concat('_initStorage');                            // 2424\n                        for (var i = 0; i < customDriverMethods.length; i++) {                                      // 2425\n                            var customDriverMethod = customDriverMethods[i];                                        // 2426\n                            if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n                                reject(complianceError);                                                            // 2428\n                                return;                                                                             // 2429\n                            }                                                                                       // 2430\n                        }                                                                                           // 2431\n                                                                                                                    // 2432\n                        var supportPromise = Promise.resolve(true);                                                 // 2433\n                        if ('_support' in driverObject) {                                                           // 2434\n                            if (driverObject._support && typeof driverObject._support === 'function') {             // 2435\n                                supportPromise = driverObject._support();                                           // 2436\n                            } else {                                                                                // 2437\n                                supportPromise = Promise.resolve(!!driverObject._support);                          // 2438\n                            }                                                                                       // 2439\n                        }                                                                                           // 2440\n                                                                                                                    // 2441\n                        supportPromise.then(function (supportResult) {                                              // 2442\n                            driverSupport[driverName] = supportResult;                                              // 2443\n                            CustomDrivers[driverName] = driverObject;                                               // 2444\n                            resolve();                                                                              // 2445\n                        }, reject);                                                                                 // 2446\n                    } catch (e) {                                                                                   // 2447\n                        reject(e);                                                                                  // 2448\n                    }                                                                                               // 2449\n                });                                                                                                 // 2450\n                                                                                                                    // 2451\n                promise.then(callback, errorCallback);                                                              // 2452\n                return promise;                                                                                     // 2453\n            };                                                                                                      // 2454\n                                                                                                                    // 2455\n            LocalForage.prototype.driver = function driver() {                                                      // 2456\n                return this._driver || null;                                                                        // 2457\n            };                                                                                                      // 2458\n                                                                                                                    // 2459\n            LocalForage.prototype.ready = function ready(callback) {                                                // 2460\n                var self = this;                                                                                    // 2461\n                                                                                                                    // 2462\n                var promise = new Promise(function (resolve, reject) {                                              // 2463\n                    self._driverSet.then(function () {                                                              // 2464\n                        if (self._ready === null) {                                                                 // 2465\n                            self._ready = self._initStorage(self._config);                                          // 2466\n                        }                                                                                           // 2467\n                                                                                                                    // 2468\n                        self._ready.then(resolve, reject);                                                          // 2469\n                    })['catch'](reject);                                                                            // 2470\n                });                                                                                                 // 2471\n                                                                                                                    // 2472\n                promise.then(callback, callback);                                                                   // 2473\n                return promise;                                                                                     // 2474\n            };                                                                                                      // 2475\n                                                                                                                    // 2476\n            LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {                // 2477\n                var self = this;                                                                                    // 2478\n                                                                                                                    // 2479\n                if (typeof drivers === 'string') {                                                                  // 2480\n                    drivers = [drivers];                                                                            // 2481\n                }                                                                                                   // 2482\n                                                                                                                    // 2483\n                this._driverSet = new Promise(function (resolve, reject) {                                          // 2484\n                    var driverName = self._getFirstSupportedDriver(drivers);                                        // 2485\n                    var error = new Error('No available storage method found.');                                    // 2486\n                                                                                                                    // 2487\n                    if (!driverName) {                                                                              // 2488\n                        self._driverSet = Promise.reject(error);                                                    // 2489\n                        reject(error);                                                                              // 2490\n                        return;                                                                                     // 2491\n                    }                                                                                               // 2492\n                                                                                                                    // 2493\n                    self._dbInfo = null;                                                                            // 2494\n                    self._ready = null;                                                                             // 2495\n                                                                                                                    // 2496\n                    if (isLibraryDriver(driverName)) {                                                              // 2497\n                        var driverPromise;                                                                          // 2498\n                        switch (driverName) {                                                                       // 2499\n                            case self.INDEXEDDB:                                                                    // 2500\n                                driverPromise = new Promise(function (resolve, reject) {                            // 2501\n                                    if (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd) {\n                                        _systemImportTransformerGlobalIdentifier.require(['asyncStorage'], resolve, reject);\n                                    } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') || typeof module !== 'undefined' && (module.component && (_systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component'))) {\n                                        resolve(require('./drivers/indexeddb'));                                    // 2505\n                                    } else {                                                                        // 2506\n                                        resolve(_systemImportTransformerGlobalIdentifier['asyncStorage']);          // 2507\n                                    }                                                                               // 2508\n                                });                                                                                 // 2509\n                                break;                                                                              // 2510\n                            case self.LOCALSTORAGE:                                                                 // 2511\n                                driverPromise = new Promise(function (resolve, reject) {                            // 2512\n                                    if (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd) {\n                                        _systemImportTransformerGlobalIdentifier.require(['localStorageWrapper'], resolve, reject);\n                                    } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') || typeof module !== 'undefined' && (module.component && (_systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component'))) {\n                                        resolve(require('./drivers/localstorage'));                                 // 2516\n                                    } else {                                                                        // 2517\n                                        resolve(_systemImportTransformerGlobalIdentifier['localStorageWrapper']);   // 2518\n                                    }                                                                               // 2519\n                                });                                                                                 // 2520\n                                break;                                                                              // 2521\n                            case self.WEBSQL:                                                                       // 2522\n                                driverPromise = new Promise(function (resolve, reject) {                            // 2523\n                                    if (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd) {\n                                        _systemImportTransformerGlobalIdentifier.require(['webSQLStorage'], resolve, reject);\n                                    } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') || typeof module !== 'undefined' && (module.component && (_systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component'))) {\n                                        resolve(require('./drivers/websql'));                                       // 2527\n                                    } else {                                                                        // 2528\n                                        resolve(_systemImportTransformerGlobalIdentifier['webSQLStorage']);         // 2529\n                                    }                                                                               // 2530\n                                });                                                                                 // 2531\n                                break;                                                                              // 2532\n                        }                                                                                           // 2533\n                        driverPromise.then(function (driver) {                                                      // 2534\n                            self._extend(driver);                                                                   // 2535\n                            resolve();                                                                              // 2536\n                        });                                                                                         // 2537\n                    } else if (CustomDrivers[driverName]) {                                                         // 2538\n                        self._extend(CustomDrivers[driverName]);                                                    // 2539\n                        resolve();                                                                                  // 2540\n                    } else {                                                                                        // 2541\n                        self._driverSet = Promise.reject(error);                                                    // 2542\n                        reject(error);                                                                              // 2543\n                    }                                                                                               // 2544\n                });                                                                                                 // 2545\n                                                                                                                    // 2546\n                function setDriverToConfig() {                                                                      // 2547\n                    self._config.driver = self.driver();                                                            // 2548\n                }                                                                                                   // 2549\n                this._driverSet.then(setDriverToConfig, setDriverToConfig);                                         // 2550\n                                                                                                                    // 2551\n                this._driverSet.then(callback, errorCallback);                                                      // 2552\n                return this._driverSet;                                                                             // 2553\n            };                                                                                                      // 2554\n                                                                                                                    // 2555\n            LocalForage.prototype.supports = function supports(driverName) {                                        // 2556\n                return !!driverSupport[driverName];                                                                 // 2557\n            };                                                                                                      // 2558\n                                                                                                                    // 2559\n            LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {                         // 2560\n                extend(this, libraryMethodsAndProperties);                                                          // 2561\n            };                                                                                                      // 2562\n                                                                                                                    // 2563\n            // Used to determine which driver we should use as the backend for this                                 // 2564\n            // instance of localForage.                                                                             // 2565\n                                                                                                                    // 2566\n            LocalForage.prototype._getFirstSupportedDriver = function _getFirstSupportedDriver(drivers) {           // 2567\n                if (drivers && isArray(drivers)) {                                                                  // 2568\n                    for (var i = 0; i < drivers.length; i++) {                                                      // 2569\n                        var driver = drivers[i];                                                                    // 2570\n                                                                                                                    // 2571\n                        if (this.supports(driver)) {                                                                // 2572\n                            return driver;                                                                          // 2573\n                        }                                                                                           // 2574\n                    }                                                                                               // 2575\n                }                                                                                                   // 2576\n                                                                                                                    // 2577\n                return null;                                                                                        // 2578\n            };                                                                                                      // 2579\n                                                                                                                    // 2580\n            LocalForage.prototype.createInstance = function createInstance(options) {                               // 2581\n                return new LocalForage(options);                                                                    // 2582\n            };                                                                                                      // 2583\n                                                                                                                    // 2584\n            return LocalForage;                                                                                     // 2585\n        })();                                                                                                       // 2586\n                                                                                                                    // 2587\n        var localForage = new LocalForage();                                                                        // 2588\n                                                                                                                    // 2589\n        module.exports = localForage;                                                                               // 2590\n    }).call(typeof window !== 'undefined' ? window : self);                                                         // 2591\n});                                                                                                                 // 2592\n                                                                                                                    // 2593\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/frozeman_persistent-minimongo2/persistent-minimongo.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\nPackages                                                                                                            // 2\n                                                                                                                    // 3\n@module Packages                                                                                                    // 4\n*/                                                                                                                  // 5\n                                                                                                                    // 6\n/**                                                                                                                 // 7\nThe PersistentMinimongo2 package                                                                                    // 8\n                                                                                                                    // 9\n@class PersistentMinimongo2                                                                                         // 10\n@constructor                                                                                                        // 11\n*/                                                                                                                  // 12\n                                                                                                                    // 13\n                                                                                                                    // 14\n                                                                                                                    // 15\n/**                                                                                                                 // 16\nIf the localstorage goes over 4.8 MB, trim the collections.                                                         // 17\n                                                                                                                    // 18\n@property capLocalStorageSize                                                                                       // 19\n*/                                                                                                                  // 20\nvar capLocalStorageSize = 4.8;                                                                                      // 21\n                                                                                                                    // 22\n/**                                                                                                                 // 23\nIf the localstorage goes over `capLocalStorageSize`, trim the current collection,                                   // 24\nwhich wanted to add a new entry, by 50 entries.                                                                     // 25\n                                                                                                                    // 26\n@property trimCollectionBy                                                                                          // 27\n*/                                                                                                                  // 28\nvar trimCollectionBy = 50;                                                                                          // 29\n                                                                                                                    // 30\n                                                                                                                    // 31\n                                                                                                                    // 32\nPersistentMinimongo2 = function (collection, dbname) {                                                              // 33\n    var self = this;                                                                                                // 34\n    if (! (self instanceof PersistentMinimongo2))                                                                   // 35\n            throw new Error('use \"new\" to construct a PersistentMinimongo2');                                       // 36\n                                                                                                                    // 37\n    self.key = 'minimongo__' + collection._name;                                                                    // 38\n    self.col = collection;                                                                                          // 39\n    self.stats = { added: 0, removed: 0, changed: 0 };                                                              // 40\n    self.list = [];                                                                                                 // 41\n                                                                                                                    // 42\n    persisters.push(self);                                                                                          // 43\n                                                                                                                    // 44\n    // config                                                                                                       // 45\n    self.store = localforage.createInstance({                                                                       // 46\n        name        : 'persistent-minimongo2-' + (dbname || 'db'),                                                  // 47\n        version     : 1.0,                                                                                          // 48\n        // size        : 4980736, // Size of database, in bytes. WebSQL-only for now.                               // 49\n        storeName   : 'minimongo',                                                                                  // 50\n        description : 'frozeman:persistent-minimongo2 data store'                                                   // 51\n    });                                                                                                             // 52\n                                                                                                                    // 53\n    // load from storage                                                                                            // 54\n    self.refresh(true);                                                                                             // 55\n                                                                                                                    // 56\n    self.col.find({}).observe({                                                                                     // 57\n        added: function (doc) {                                                                                     // 58\n                                                                                                                    // 59\n            // Check if the localstorage is to big and reduce the current collection by 50 items                    // 60\n            if(self.store.driver() === 'localStorageWrapper')                                                       // 61\n                self.capCollection();                                                                               // 62\n                                                                                                                    // 63\n                                                                                                                    // 64\n            // add document id to tracking list and store                                                           // 65\n            if (!_.contains(self.list, doc._id)) {                                                                  // 66\n                self.list.push(doc._id);                                                                            // 67\n                                                                                                                    // 68\n                // store copy of document into db, if not already there                                             // 69\n                var key = self._makeDataKey(doc._id);                                                               // 70\n                self.store.setItem(key, doc, function(err, value) {                                                 // 71\n                    if(!err) {                                                                                      // 72\n                        ++self.stats.added;                                                                         // 73\n                    }                                                                                               // 74\n                });                                                                                                 // 75\n                                                                                                                    // 76\n                // update the list                                                                                  // 77\n                self.store.setItem(self.key, self.list, function(err, value) {});                                   // 78\n            }                                                                                                       // 79\n        },                                                                                                          // 80\n                                                                                                                    // 81\n        removed: function (doc) {                                                                                   // 82\n                                                                                                                    // 83\n            // if not in list, nothing to do                                                                        // 84\n            if(!_.contains(self.list, doc._id))                                                                     // 85\n                return;                                                                                             // 86\n                                                                                                                    // 87\n                                                                                                                    // 88\n            // remove document copy from local storage                                                              // 89\n            self.store.removeItem(self._makeDataKey(doc._id), function(err) {                                       // 90\n                if(!err) {                                                                                          // 91\n                    ++self.stats.removed;                                                                           // 92\n                }                                                                                                   // 93\n            });                                                                                                     // 94\n                                                                                                                    // 95\n            // remove from list                                                                                     // 96\n            self.list = _.without(self.list, doc._id);                                                              // 97\n                                                                                                                    // 98\n            // if tracking list is empty, delete; else store updated copy                                           // 99\n            if(self.list.length === 0) {                                                                            // 100\n                self.store.removeItem(self.key, function(){});                                                      // 101\n            } else {                                                                                                // 102\n                self.store.setItem(self.key, self.list, function(){});                                              // 103\n            }                                                                                                       // 104\n                                                                                                                    // 105\n        },                                                                                                          // 106\n                                                                                                                    // 107\n        changed: function (newDoc, oldDoc) {                                                                        // 108\n            // update document in local storage                                                                     // 109\n            self.store.setItem(self._makeDataKey(newDoc._id), newDoc, function(err, value) {                        // 110\n                if(!err) {                                                                                          // 111\n                    ++self.stats.changed;                                                                           // 112\n                }                                                                                                   // 113\n            });                                                                                                     // 114\n        }                                                                                                           // 115\n    });                                                                                                             // 116\n};                                                                                                                  // 117\n                                                                                                                    // 118\nPersistentMinimongo2.prototype = {                                                                                  // 119\n    constructor: PersistentMinimongo2,                                                                              // 120\n    _getStats: function () {                                                                                        // 121\n        return this.stats;                                                                                          // 122\n    },                                                                                                              // 123\n    _getKey: function () {                                                                                          // 124\n        return this.key;                                                                                            // 125\n    },                                                                                                              // 126\n    _makeDataKey: function (id) {                                                                                   // 127\n        return this.key + '__' + id;                                                                                // 128\n    },                                                                                                              // 129\n    /**                                                                                                             // 130\n    Refresh the local storage                                                                                       // 131\n                                                                                                                    // 132\n    @method refresh                                                                                                 // 133\n    @return {String}                                                                                                // 134\n    */                                                                                                              // 135\n    refresh: function (init) {                                                                                      // 136\n        var self = this;                                                                                            // 137\n        self.store.getItem(self.key, function(err, list) {                                                          // 138\n            if(!err) {                                                                                              // 139\n                                                                                                                    // 140\n                self.list = list || [];                                                                             // 141\n                self.stats.added = 0;                                                                               // 142\n                                                                                                                    // 143\n                if (!! list) {                                                                                      // 144\n                    var length = list.length;                                                                       // 145\n                    var count = 0;                                                                                  // 146\n                    var newList = [];                                                                               // 147\n                    _.each(list, function (id) {                                                                    // 148\n                        self.store.getItem(self._makeDataKey(id), function(err, doc) {                              // 149\n                            if(!err) {                                                                              // 150\n                                if(!! doc) {                                                                        // 151\n                                    var id = doc._id;                                                               // 152\n                                    var foundDoc = self.col.findOne({_id: id});                                     // 153\n                                                                                                                    // 154\n                                    if(foundDoc) {                                                                  // 155\n                                        delete doc._id;                                                             // 156\n                                        self.col.update({_id: id}, {$set: doc});                                    // 157\n                                    } else {                                                                        // 158\n                                        id = self.col.insert(doc);                                                  // 159\n                                    }                                                                               // 160\n                                                                                                                    // 161\n                                    newList.push(id);                                                               // 162\n                                }                                                                                   // 163\n                            }                                                                                       // 164\n                            count++;                                                                                // 165\n                        });                                                                                         // 166\n                    });                                                                                             // 167\n                                                                                                                    // 168\n                    // do only after all items where checked                                                        // 169\n                    var intervalId = setInterval(function() {                                                       // 170\n                        if(count >= length) {                                                                       // 171\n                            clearInterval(intervalId);                                                              // 172\n                                                                                                                    // 173\n                            self.list = newList;                                                                    // 174\n                                                                                                                    // 175\n                            // if not initializing, check for deletes                                               // 176\n                            if(! init) {                                                                            // 177\n                                                                                                                    // 178\n                                self.col.find({}).forEach(function (doc) {                                          // 179\n                                    if(! _.contains(self.list, doc._id))                                            // 180\n                                        self.col.remove({ _id: doc._id });                                          // 181\n                                });                                                                                 // 182\n                            }                                                                                       // 183\n                                                                                                                    // 184\n                            // if initializing, save cleaned list (if changed)                                      // 185\n                            if(init && length !== self.list.length) {                                               // 186\n                                // if tracking list is empty, delete; else store updated copy                       // 187\n                                if(self.list.length === 0) {                                                        // 188\n                                    self.store.removeItem(self.key, function(){});                                  // 189\n                                } else {                                                                            // 190\n                                    self.store.setItem(self.key, self.list, function(){});                          // 191\n                                }                                                                                   // 192\n                            }                                                                                       // 193\n                        }                                                                                           // 194\n                    }, 1);                                                                                          // 195\n                                                                                                                    // 196\n                }                                                                                                   // 197\n            }                                                                                                       // 198\n        });                                                                                                         // 199\n    },                                                                                                              // 200\n    /**                                                                                                             // 201\n    Gets the current localstorage size in MB                                                                        // 202\n                                                                                                                    // 203\n    @method localStorageSize                                                                                        // 204\n    @return {String} total localstorage size in MB                                                                  // 205\n    */                                                                                                              // 206\n    localStorageSize: function() {                                                                                  // 207\n                                                                                                                    // 208\n        // function toSizeMB(info) {                                                                                // 209\n        //   info.size = toMB(info.size).toFixed(2) + ' MB';                                                        // 210\n        //   return info;                                                                                           // 211\n        // }                                                                                                        // 212\n                                                                                                                    // 213\n        // var sizes = Object.keys(localStorage).map(toSize).map(toSizeMB);                                         // 214\n        // console.table(sizes);                                                                                    // 215\n                                                                                                                    // 216\n        var size = 0;                                                                                               // 217\n        if(localStorage) {                                                                                          // 218\n            _.each(Object.keys(localStorage), function(key){                                                        // 219\n                size += localStorage[key].length * 2 / 1024 / 1024;                                                 // 220\n            });                                                                                                     // 221\n        }                                                                                                           // 222\n                                                                                                                    // 223\n        return size;                                                                                                // 224\n    },                                                                                                              // 225\n    /**                                                                                                             // 226\n    Check if the localstorage is to big and reduce the current collection by 50 items                               // 227\n                                                                                                                    // 228\n    @method localStorageSize                                                                                        // 229\n    @return {String}                                                                                                // 230\n    */                                                                                                              // 231\n    capCollection: function(){                                                                                      // 232\n        var _this = this;                                                                                           // 233\n                                                                                                                    // 234\n        if(_this.localStorageSize() > capLocalStorageSize) {                                                        // 235\n            console.log(_this.localStorageSize(), _this.col.find({}).count());                                      // 236\n            // find the first 50 entries and remove them                                                            // 237\n            _.each(_this.col.find({}, {limit: trimCollectionBy}).fetch(), function(item){                           // 238\n                _this.col.remove(item._id);                                                                         // 239\n            });                                                                                                     // 240\n        }                                                                                                           // 241\n    }                                                                                                               // 242\n};                                                                                                                  // 243\n                                                                                                                    // 244\nvar persisters = [];                                                                                                // 245\nvar lpTimer = null;                                                                                                 // 246\n                                                                                                                    // 247\n// React on manual local storage changes                                                                            // 248\n// Meteor.startup(function () {                                                                                     // 249\n//     $(window).bind('storage', function (e) {                                                                     // 250\n//         console.log('STORAGE');                                                                                  // 251\n//         Meteor.clearTimeout(lpTimer);                                                                            // 252\n//         lpTimer = Meteor.setTimeout(function () {                                                                // 253\n//             _.each(persisters, function (lp) {                                                                   // 254\n//                 lp.refresh(false);                                                                               // 255\n//             });                                                                                                  // 256\n//         }, 250);                                                                                                 // 257\n//     });                                                                                                          // 258\n// });                                                                                                              // 259\n                                                                                                                    // 260\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['frozeman:persistent-minimongo2'] = {}, {\n  PersistentMinimongo2: PersistentMinimongo2\n});\n\n})();\n","servePath":"/packages/frozeman_persistent-minimongo2.js"}]